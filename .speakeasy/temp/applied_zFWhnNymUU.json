{
  "openapi": "3.1.0",
  "info": {
    "title": "Mixpeek API",
    "description": "This is the Mixpeek API, providing access to various endpoints for data processing and retrieval.",
    "termsOfService": "https://mixpeek.com/terms",
    "contact": {
      "name": "Mixpeek Support",
      "url": "https://mixpeek.com/contact",
      "email": "info@mixpeek.com"
    },
    "version": "0.81"
  },
  "servers": [
    {
      "url": "https://api.mixpeek.com"
    }
  ],
  "paths": {
    "/healthcheck": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Healthcheck",
        "operationId": "healthcheck_healthcheck_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "check"
      }
    },
    "/v1/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "get_organization_v1_organizations_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/organizations/users/{user_email}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get User",
        "operationId": "get_user_v1_organizations_users__user_email__get",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel-Output"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete User",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "delete_user_v1_organizations_users__user_email__delete",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users",
        "x-speakeasy-name-override": "delete"
      }
    },
    "/v1/organizations/users": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Add User",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "add_user_v1_organizations_users_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel-Output"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "addUser"
      }
    },
    "/v1/organizations/users/{user_email}/api-keys": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create Api Key",
        "description": "Create a new API key for a specific user",
        "operationId": "create_api_key_v1_organizations_users__user_email__api_keys_post",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "key_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "title": "Key Name"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users",
        "x-speakeasy-name-override": "createApiKey"
      }
    },
    "/v1/organizations/users/{user_email}/api-keys/{key_name}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete Api Key",
        "description": "Delete a specific API key for a user",
        "operationId": "delete_api_key_v1_organizations_users__user_email__api_keys__key_name__delete",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "key_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Name"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "deleteApiKey"
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update Api Key",
        "description": "Update an API key's name or permissions",
        "operationId": "update_api_key_v1_organizations_users__user_email__api_keys__key_name__patch",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "key_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Name"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "updateApiKey"
      }
    },
    "/v1/organizations/usage": {
      "post": {
        "tags": [
          "Organizations Usage"
        ],
        "summary": "Get Usage",
        "operationId": "get_usage_v1_organizations_usage_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUsageRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/notifications/send": {
      "post": {
        "tags": [
          "Organization Notifications"
        ],
        "summary": "Send Notification",
        "operationId": "send_notification_v1_organizations_notifications_send_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/namespaces": {
      "post": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Create Namespace",
        "description": "Creates a new namespace with the specified configuration",
        "operationId": "create_namespace_v1_namespaces_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNamespaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create"
      },
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "List Namespaces",
        "description": "List all namespaces for a user",
        "operationId": "list_namespaces_v1_namespaces_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  },
                  "title": "Response List Namespaces V1 Namespaces Get"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list"
      }
    },
    "/v1/namespaces/{namespace}": {
      "delete": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Delete Namespace",
        "description": "Deletes an existing namespace using either its name or ID",
        "operationId": "delete_namespace_v1_namespaces__namespace__delete",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the namespace name or namespace ID",
              "title": "Namespace"
            },
            "description": "Either the namespace name or namespace ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "put": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Update Namespace",
        "description": "Fully updates an existing namespace (all fields required)",
        "operationId": "update_namespace_v1_namespaces__namespace__put",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the namespace name or namespace ID",
              "examples": [
                "my_namespace",
                "ns_1234567890"
              ],
              "title": "Namespace"
            },
            "description": "Either the namespace name or namespace ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNamespaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update"
      },
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Get Namespace",
        "description": "Retrieve details of a specific namespace using either its name or ID",
        "operationId": "get_namespace_v1_namespaces__namespace__get",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the namespace name or namespace ID",
              "examples": [
                "my_namespace",
                "ns_1234567890"
              ],
              "title": "Namespace"
            },
            "description": "Either the namespace name or namespace ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/buckets/create": {
      "post": {
        "tags": [
          "Buckets"
        ],
        "summary": "Create Bucket",
        "description": "This endpoint allows you to create a new bucket with a defined schema.\n    A bucket is a collection of objects that conform to the schema.\n    The schema defines the structure and validation rules for objects in the bucket.",
        "operationId": "create_bucket_v1_buckets_create_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BucketCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/buckets/{bucket_identifier}": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Get Bucket",
        "description": "This endpoint retrieves a bucket by its ID.",
        "operationId": "get_bucket_v1_buckets__bucket_identifier__get",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bucket Identifier"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Buckets"
        ],
        "summary": "Update Bucket",
        "description": "This endpoint allows you to update an existing bucket.\n    You can update the bucket's name, description, and metadata.",
        "operationId": "update_bucket_v1_buckets__bucket_identifier__put",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bucket Identifier"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BucketUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Buckets"
        ],
        "summary": "Delete Bucket",
        "description": "This endpoint deletes a bucket and all its objects.",
        "operationId": "delete_bucket_v1_buckets__bucket_identifier__delete",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Bucket Identifier"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/buckets": {
      "post": {
        "tags": [
          "Buckets"
        ],
        "summary": "List Buckets",
        "description": "This endpoint lists buckets with pagination, sorting, and filtering options.",
        "operationId": "list_buckets_v1_buckets_post",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Offset"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListBucketsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBucketsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/buckets/{bucket_identifier}/objects/create": {
      "post": {
        "tags": [
          "Bucket Objects"
        ],
        "summary": "Create Object",
        "description": "This endpoint creates a new object in the specified bucket.\n    The object must conform to the bucket's schema.",
        "operationId": "create_object_v1_buckets__bucket_identifier__objects_create_post",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the bucket",
              "title": "Bucket Identifier"
            },
            "description": "Identifier of the bucket"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/buckets/{bucket_identifier}/objects/{object_identifier}": {
      "get": {
        "tags": [
          "Bucket Objects"
        ],
        "summary": "Get Object",
        "description": "This endpoint retrieves an object by its ID from the specified bucket.",
        "operationId": "get_object_v1_buckets__bucket_identifier__objects__object_identifier__get",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the bucket",
              "title": "Bucket Identifier"
            },
            "description": "Identifier of the bucket"
          },
          {
            "name": "object_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the object",
              "title": "Object Identifier"
            },
            "description": "Identifier of the object"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bucket Objects"
        ],
        "summary": "Update Object",
        "description": "This endpoint updates an existing object in the specified bucket.\n    The updated object must conform to the bucket's schema.",
        "operationId": "update_object_v1_buckets__bucket_identifier__objects__object_identifier__put",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the bucket",
              "title": "Bucket Identifier"
            },
            "description": "Identifier of the bucket"
          },
          {
            "name": "object_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the object",
              "title": "Object Identifier"
            },
            "description": "Identifier of the object"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateObjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bucket Objects"
        ],
        "summary": "Delete Object",
        "description": "This endpoint deletes an object from the specified bucket.",
        "operationId": "delete_object_v1_buckets__bucket_identifier__objects__object_identifier__delete",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the bucket",
              "title": "Bucket Identifier"
            },
            "description": "Identifier of the bucket"
          },
          {
            "name": "object_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the object",
              "title": "Object Identifier"
            },
            "description": "Identifier of the object"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/buckets/{bucket_identifier}/objects": {
      "post": {
        "tags": [
          "Bucket Objects"
        ],
        "summary": "List Objects",
        "description": "This endpoint lists objects in a bucket with pagination, sorting, and filtering options.",
        "operationId": "list_objects_v1_buckets__bucket_identifier__objects_post",
        "parameters": [
          {
            "name": "bucket_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Identifier of the bucket",
              "title": "Bucket Identifier"
            },
            "description": "Identifier of the bucket"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Offset"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListObjectsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/create": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create Collection",
        "description": "This endpoint allows you to create a new collection.",
        "operationId": "create_collection_v1_collections_create_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/{collection_id}": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get Collection",
        "operationId": "get_collection_v1_collections__collection_id__get",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection to retrieve",
              "title": "Collection Id"
            },
            "description": "The ID of the collection to retrieve"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/cache/invalidate": {
      "post": {
        "tags": [
          "Collection Cache"
        ],
        "summary": "Invalidate Cache",
        "description": "Invalidate cache entries for a collection.\n\nArgs:\n    collection_id: ID of the collection to invalidate\n    action: Action that triggered invalidation (create, update, delete)\n    document_ids: Optional list of specific document IDs to invalidate\n    retriever_id: Optional retriever ID for retriever-specific invalidation\n    recompute_strategy: Strategy for recomputing invalidated entries\n    cache_service: Cache service instance\n\nReturns:\n    Success status",
        "operationId": "invalidate_cache_v1_collections_cache_invalidate_post",
        "parameters": [
          {
            "name": "collection_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Collection Id"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Action"
            }
          },
          {
            "name": "retriever_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Retriever Id"
            }
          },
          {
            "name": "recompute_strategy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/RecomputeStrategy",
              "default": "background"
            }
          },
          {
            "name": "internal_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Internal Id"
            }
          },
          {
            "name": "redis_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Redis Url"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prefix"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Document Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Invalidate Cache V1 Collections Cache Invalidate Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/cache/stats": {
      "get": {
        "tags": [
          "Collection Cache"
        ],
        "summary": "Get Cache Stats",
        "description": "Get cache statistics.\n\nArgs:\n    cache_service: Cache service instance\n\nReturns:\n    Cache statistics",
        "operationId": "get_cache_stats_v1_collections_cache_stats_get",
        "parameters": [
          {
            "name": "internal_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Internal Id"
            }
          },
          {
            "name": "redis_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Redis Url"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prefix"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/cache/cleanup": {
      "post": {
        "tags": [
          "Collection Cache"
        ],
        "summary": "Cleanup Cache",
        "description": "Cleanup expired cache entries.\n\nArgs:\n    batch_size: Number of keys to process per batch\n    cache_service: Cache service instance\n\nReturns:\n    Number of keys deleted",
        "operationId": "cleanup_cache_v1_collections_cache_cleanup_post",
        "parameters": [
          {
            "name": "batch_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Batch Size"
            }
          },
          {
            "name": "internal_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Internal Id"
            }
          },
          {
            "name": "redis_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Redis Url"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prefix"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "title": "Response Cleanup Cache V1 Collections Cache Cleanup Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/{collection_identifier}/documents/{document_id}": {
      "get": {
        "tags": [
          "Collection Documents"
        ],
        "summary": "Get Document",
        "description": "Get a document by ID.\n    \n\n**Requirements:**\n- Required permissions: read",
        "operationId": "get_document_v1_collections__collection_identifier__documents__document_id__get",
        "parameters": [
          {
            "name": "collection_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection",
              "title": "Collection Identifier"
            },
            "description": "The ID of the collection"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the document to retrieve",
              "title": "Document Id"
            },
            "description": "The ID of the document to retrieve"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Collection Documents"
        ],
        "summary": "Update Document",
        "description": "Update an existing document.\n    \n\n**Requirements:**\n- Required permissions: write",
        "operationId": "update_document_v1_collections__collection_identifier__documents__document_id__put",
        "parameters": [
          {
            "name": "collection_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection",
              "title": "Collection Identifier"
            },
            "description": "The ID of the collection"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the document to update",
              "title": "Document Id"
            },
            "description": "The ID of the document to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Collection Documents"
        ],
        "summary": "Delete Document",
        "description": "Delete a document.\n    \n\n**Requirements:**\n- Required permissions: write",
        "operationId": "delete_document_v1_collections__collection_identifier__documents__document_id__delete",
        "parameters": [
          {
            "name": "collection_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection",
              "title": "Collection Identifier"
            },
            "description": "The ID of the collection"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the document to delete",
              "title": "Document Id"
            },
            "description": "The ID of the document to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/{collection_identifier}/documents": {
      "get": {
        "tags": [
          "Collection Documents"
        ],
        "summary": "List Documents",
        "description": "List documents with pagination and filtering.\n    \n\n**Requirements:**\n- Required permissions: read",
        "operationId": "list_documents_v1_collections__collection_identifier__documents_get",
        "parameters": [
          {
            "name": "collection_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection",
              "title": "Collection Identifier"
            },
            "description": "The ID of the collection"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of documents to return per page",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of documents to return per page"
          },
          {
            "name": "offset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ID of the document to start pagination from",
              "title": "Offset Id"
            },
            "description": "ID of the document to start pagination from"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Field to sort by",
              "title": "Sort"
            },
            "description": "Field to sort by"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter criteria",
              "title": "Filters"
            },
            "description": "Filter criteria"
          },
          {
            "name": "select",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to select",
              "title": "Select"
            },
            "description": "Fields to select"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/collections/{collection_identifier}/documents/batch": {
      "put": {
        "tags": [
          "Collection Documents"
        ],
        "summary": "Batch Update Documents",
        "description": "Update multiple documents in a batch.\n    \n\n**Requirements:**\n- Required permissions: write",
        "operationId": "batch_update_documents_v1_collections__collection_identifier__documents_batch_put",
        "parameters": [
          {
            "name": "collection_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection",
              "title": "Collection Identifier"
            },
            "description": "The ID of the collection"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/DocumentUpdate"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                },
                "title": "Documents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/DocumentResponse"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "title": "Response Batch Update Documents V1 Collections  Collection Identifier  Documents Batch Put"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Collection Documents"
        ],
        "summary": "Batch Delete Documents",
        "description": "Delete multiple documents in a batch.\n    \n\n**Requirements:**\n- Required permissions: write",
        "operationId": "batch_delete_documents_v1_collections__collection_identifier__documents_batch_delete",
        "parameters": [
          {
            "name": "collection_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the collection",
              "title": "Collection Identifier"
            },
            "description": "The ID of the collection"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Document Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/features/extractors": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "List Feature Extractors",
        "description": "List all available feature extractors grouped by category",
        "operationId": "list_feature_extractors_v1_features_extractors_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeatureExtractorDefinition"
                  },
                  "title": "Response List Feature Extractors V1 Features Extractors Get"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/features/extractors/{feature_id}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Get Feature Extractor Details",
        "description": "Get detailed information about a specific feature extractor",
        "operationId": "get_feature_extractor_v1_features_extractors__feature_id__get",
        "parameters": [
          {
            "name": "feature_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Feature Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureExtractorDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrievers/retrievers": {
      "post": {
        "tags": [
          "Retrievers"
        ],
        "summary": "Create Retriever",
        "operationId": "create_retriever_v1_retrievers_retrievers_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRetrieverRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieverModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrievers/retrievers/{retriever_id}": {
      "get": {
        "tags": [
          "Retrievers"
        ],
        "summary": "Get Retriever",
        "operationId": "get_retriever_v1_retrievers_retrievers__retriever_id__get",
        "parameters": [
          {
            "name": "retriever_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Retriever Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieverModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrievers/retrievers/{retriever_id}/execute": {
      "post": {
        "tags": [
          "Retrievers"
        ],
        "summary": "Execute Retriever",
        "operationId": "execute_retriever_v1_retrievers_retrievers__retriever_id__execute_post",
        "parameters": [
          {
            "name": "retriever_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Retriever Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieverQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieverResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrievers/stages": {
      "get": {
        "tags": [
          "Retriever Stages"
        ],
        "summary": "List Retriever Stages",
        "description": "List all available retriever stages from the registry",
        "operationId": "get_retriever_stages_v1_retrievers_stages_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StageDefinition"
                  },
                  "title": "Response Get Retriever Stages V1 Retrievers Stages Get"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrievers/interactions": {
      "post": {
        "tags": [
          "Retriever Interactions"
        ],
        "summary": "Create Interaction",
        "description": "Record a search interaction (view, click, feedback, etc.)\n\n**Requirements:**\n- Required permissions: write",
        "operationId": "create_interaction_v1_retrievers_interactions_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInteraction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Retriever Interactions"
        ],
        "summary": "List Interactions",
        "description": "List interactions with optional filters and pagination\n\n**Requirements:**\n- Required permissions: read",
        "operationId": "list_interactions_v1_retrievers_interactions_get",
        "parameters": [
          {
            "name": "feature_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Feature Id"
            }
          },
          {
            "name": "interaction_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Interaction Type"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InteractionResponse"
                  },
                  "title": "Response List Interactions V1 Retrievers Interactions Get"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrievers/interactions/{interaction_id}": {
      "get": {
        "tags": [
          "Retriever Interactions"
        ],
        "summary": "Get Interaction",
        "description": "Get a specific interaction\n\n**Requirements:**\n- Required permissions: read",
        "operationId": "get_interaction_v1_retrievers_interactions__interaction_id__get",
        "parameters": [
          {
            "name": "interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Interaction Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Retriever Interactions"
        ],
        "summary": "Delete Interaction",
        "description": "Delete a specific interaction\n\n**Requirements:**\n- Required permissions: write",
        "operationId": "delete_interaction_v1_retrievers_interactions__interaction_id__delete",
        "parameters": [
          {
            "name": "interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Interaction Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{task_id}": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Kill Task",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "kill_task_v1_tasks__task_id__delete",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get Task Information",
        "description": "Retrieve a task by its ID.\n    \n    A task may have an expiration time, after which it will still be returned but marked as expired.\n    This allows tracking of historical tasks while indicating their current validity state.",
        "operationId": "get_task_v1_tasks__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List Active Tasks",
        "description": "Retrieve all tasks that are not in a complete state (DONE, FAILED, SKIPPED, or CANCELLED)",
        "operationId": "list_active_tasks_v1_tasks_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "listActive"
      }
    },
    "/v1/research": {
      "get": {
        "tags": [
          "Research"
        ],
        "summary": "Get Research",
        "operationId": "get_research_v1_research_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/taxonomies": {
      "post": {
        "tags": [
          "Taxonomies"
        ],
        "summary": "Create Taxonomy",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "create_taxonomy_v1_taxonomies_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaxonomyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/clusters": {
      "post": {
        "tags": [
          "Clusters"
        ],
        "summary": "Create Cluster",
        "operationId": "create_cluster_v1_clusters_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIKey": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "title": "APIKey"
      },
      "APIKeyUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "permissions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Permission"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Permissions"
          }
        },
        "type": "object",
        "title": "APIKeyUpdate"
      },
      "AggregationType": {
        "type": "string",
        "enum": [
          "hourly",
          "daily",
          "weekly",
          "monthly"
        ],
        "title": "AggregationType",
        "description": "Types of data aggregation"
      },
      "AttributeBasedConfig": {
        "properties": {
          "attributes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Attributes",
            "description": "List of attributes to use for attribute-based clustering"
          },
          "hierarchical_grouping": {
            "type": "boolean",
            "title": "Hierarchical Grouping",
            "description": "Enable multi-level grouping similar to pandas multi-level groupby",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "attributes"
        ],
        "title": "AttributeBasedConfig"
      },
      "AutomaticNaming": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Automatically assign cluster labels to documents",
            "default": true
          },
          "generative_model": {
            "$ref": "#/components/schemas/GenerativeModels",
            "default": "gpt-4"
          },
          "method": {
            "$ref": "#/components/schemas/NamingMethod",
            "default": "centroid"
          },
          "num_nearest_points": {
            "type": "integer",
            "title": "Num Nearest Points",
            "description": "Features used to generate name",
            "default": 3
          }
        },
        "type": "object",
        "title": "AutomaticNaming"
      },
      "BasicFeatureExtractor": {
        "properties": {
          "feature_extractor_name": {
            "type": "string",
            "title": "Feature Extractor Name",
            "description": "Name of the feature extractor"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the feature extractor"
          },
          "supported_input_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Input Types",
            "description": "Supported input types"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the feature extractor"
          }
        },
        "type": "object",
        "required": [
          "feature_extractor_name",
          "description",
          "supported_input_types",
          "version"
        ],
        "title": "BasicFeatureExtractor",
        "description": "Basic feature extractor model, used for creating namespaces."
      },
      "BlobDetails": {
        "properties": {
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          },
          "size_bytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size Bytes"
          },
          "mime_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mime Type"
          },
          "hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hash"
          },
          "s3_object_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "S3 Object Key"
          }
        },
        "type": "object",
        "title": "BlobDetails",
        "description": "File details for a bucket object, these are automatically generated by the system"
      },
      "BlobModel": {
        "properties": {
          "blob_id": {
            "type": "string",
            "title": "Blob Id",
            "description": "Unique identifier for the blob"
          },
          "property": {
            "type": "string",
            "title": "Property",
            "description": "Property name of the blob"
          },
          "key_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key Prefix",
            "description": "Storage key/path of the blob, this will be used to retrieve the blob from the storage. It is similar to a file path. If not provided, it will be placed in the root of the bucket."
          },
          "type": {
            "$ref": "#/components/schemas/BucketSchemaFieldType",
            "description": "The schema field type this blob corresponds to (e.g., IMAGE, PDF, DOCUMENT)"
          },
          "data": {
            "title": "Data",
            "description": "Data for the blob"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the blob, this will only be applied to the documents that use this blob"
          },
          "details": {
            "$ref": "#/components/schemas/BlobDetails",
            "description": "Details of the blob"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus",
            "description": "Status of the blob",
            "default": "PENDING"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if the blob failed to be ingested"
          }
        },
        "type": "object",
        "required": [
          "property",
          "type",
          "data"
        ],
        "title": "BlobModel",
        "description": "Model for a blob within a bucket object"
      },
      "BoolIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "bool"
          }
        },
        "type": "object",
        "title": "BoolIndexParams",
        "description": "Configuration for boolean index"
      },
      "BucketCreateRequest": {
        "properties": {
          "bucket_name": {
            "type": "string",
            "title": "Bucket Name",
            "description": "Human-readable name for the bucket"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the bucket"
          },
          "bucket_schema": {
            "$ref": "#/components/schemas/BucketSchema-Input",
            "description": "Schema definition for objects in this bucket, this cannot be updated after the bucket is created"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata for the bucket"
          }
        },
        "type": "object",
        "required": [
          "bucket_name",
          "bucket_schema"
        ],
        "title": "BucketCreateRequest",
        "description": "Request model for creating a new bucket",
        "example": {
          "bucket_name": "user_profiles",
          "description": "Bucket for storing user profile information",
          "metadata": {
            "created_by": "admin",
            "department": "HR"
          },
          "schema": {
            "properties": {
              "user_picture": {
                "type": "image"
              },
              "documents": {
                "items": {
                  "type": "object"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "BucketResponse": {
        "properties": {
          "bucket_id": {
            "type": "string",
            "title": "Bucket Id",
            "description": "Unique identifier for the bucket"
          },
          "bucket_name": {
            "type": "string",
            "title": "Bucket Name",
            "description": "Human-readable name for the bucket"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the bucket"
          },
          "bucket_schema": {
            "$ref": "#/components/schemas/BucketSchema-Output",
            "description": "Schema definition for objects in this bucket"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata for the bucket"
          },
          "object_count": {
            "type": "integer",
            "title": "Object Count",
            "description": "Number of objects in the bucket"
          },
          "total_size_bytes": {
            "type": "integer",
            "title": "Total Size Bytes",
            "description": "Total size of all objects in the bucket in bytes"
          }
        },
        "type": "object",
        "required": [
          "bucket_name",
          "bucket_schema",
          "object_count",
          "total_size_bytes"
        ],
        "title": "BucketResponse",
        "description": "Response model for bucket operations"
      },
      "BucketSchema-Input": {
        "properties": {
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BucketSchemaField-Input"
            },
            "type": "object",
            "title": "Properties"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "properties"
        ],
        "title": "BucketSchema",
        "description": "Schema definition for bucket objects"
      },
      "BucketSchema-Output": {
        "properties": {
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BucketSchemaField-Output"
            },
            "type": "object",
            "title": "Properties"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "properties"
        ],
        "title": "BucketSchema",
        "description": "Schema definition for bucket objects"
      },
      "BucketSchemaField-Input": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BucketSchemaFieldType"
          },
          "default": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Default"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BucketSchemaField-Input"
              },
              {
                "type": "null"
              }
            ]
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/BucketSchemaField-Input"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties"
          },
          "example": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Example"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "enum": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enum"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BucketSchemaField",
        "description": "Schema field definition for bucket objects"
      },
      "BucketSchemaField-Output": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BucketSchemaFieldType"
          },
          "default": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Default"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BucketSchemaField-Output"
              },
              {
                "type": "null"
              }
            ]
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/BucketSchemaField-Output"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties"
          },
          "example": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Example"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "enum": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enum"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "BucketSchemaField",
        "description": "Schema field definition for bucket objects"
      },
      "BucketSchemaFieldType": {
        "type": "string",
        "enum": [
          "string",
          "number",
          "integer",
          "boolean",
          "object",
          "array",
          "date",
          "datetime",
          "json",
          "text",
          "image",
          "audio",
          "video",
          "pdf",
          "document",
          "spreadsheet",
          "presentation",
          "dense_vector",
          "sparse_vector",
          "int8_vector"
        ],
        "title": "BucketSchemaFieldType",
        "description": "Enum for field types in bucket schemas"
      },
      "BucketUpdateRequest": {
        "properties": {
          "bucket_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bucket Name",
            "description": "Human-readable name for the bucket"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the bucket"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata for the bucket"
          }
        },
        "type": "object",
        "title": "BucketUpdateRequest",
        "description": "Request model for updating an existing bucket"
      },
      "CacheStats": {
        "properties": {
          "hits": {
            "type": "integer",
            "title": "Hits",
            "description": "Number of cache hits",
            "default": 0
          },
          "misses": {
            "type": "integer",
            "title": "Misses",
            "description": "Number of cache misses",
            "default": 0
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "description": "Number of entries in cache",
            "default": 0
          },
          "hit_ratio": {
            "type": "number",
            "title": "Hit Ratio",
            "description": "Cache hit ratio",
            "default": 0
          },
          "retriever_stats": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "integer"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Retriever Stats",
            "description": "Statistics per retriever"
          }
        },
        "type": "object",
        "title": "CacheStats",
        "description": "Statistics about cache usage"
      },
      "ClusterType": {
        "type": "string",
        "enum": [
          "vector",
          "attribute"
        ],
        "title": "ClusterType"
      },
      "ClusteringMethod": {
        "type": "string",
        "enum": [
          "hdbscan",
          "kmeans"
        ],
        "title": "ClusteringMethod"
      },
      "CollectionCacheConfig-Input": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether caching is enabled",
            "default": true
          },
          "ttl_seconds": {
            "type": "integer",
            "title": "Ttl Seconds",
            "description": "Time-to-live for cache entries in seconds",
            "default": 604800
          },
          "invalidation_strategy": {
            "$ref": "#/components/schemas/InvalidationStrategy",
            "description": "Strategy for handling cache invalidation",
            "default": "replace_if_better"
          },
          "max_entries_per_key": {
            "type": "integer",
            "title": "Max Entries Per Key",
            "description": "Maximum number of results to cache per key",
            "default": 5
          },
          "score_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score Threshold",
            "description": "Minimum score threshold for caching results"
          },
          "invalidation_events": {
            "items": {
              "$ref": "#/components/schemas/InvalidationEvent"
            },
            "type": "array",
            "title": "Invalidation Events",
            "description": "Events that trigger cache invalidation"
          },
          "retriever_configs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RetrieverCacheConfig"
            },
            "type": "object",
            "title": "Retriever Configs",
            "description": "Retriever-specific cache configurations"
          }
        },
        "type": "object",
        "title": "CollectionCacheConfig",
        "description": "Configuration for collection-level caching"
      },
      "CollectionCacheConfig-Output": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether caching is enabled",
            "default": true
          },
          "ttl_seconds": {
            "type": "integer",
            "title": "Ttl Seconds",
            "description": "Time-to-live for cache entries in seconds",
            "default": 604800
          },
          "invalidation_strategy": {
            "$ref": "#/components/schemas/InvalidationStrategy",
            "description": "Strategy for handling cache invalidation",
            "default": "replace_if_better"
          },
          "max_entries_per_key": {
            "type": "integer",
            "title": "Max Entries Per Key",
            "description": "Maximum number of results to cache per key",
            "default": 5
          },
          "score_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score Threshold",
            "description": "Minimum score threshold for caching results"
          },
          "invalidation_events": {
            "items": {
              "$ref": "#/components/schemas/InvalidationEvent"
            },
            "type": "array",
            "title": "Invalidation Events",
            "description": "Events that trigger cache invalidation"
          },
          "retriever_configs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RetrieverCacheConfig"
            },
            "type": "object",
            "title": "Retriever Configs",
            "description": "Retriever-specific cache configurations"
          }
        },
        "type": "object",
        "title": "CollectionCacheConfig",
        "description": "Configuration for collection-level caching"
      },
      "CollectionConfig": {
        "properties": {
          "collection_id": {
            "type": "string",
            "title": "Collection Id",
            "description": "ID of the collection"
          },
          "enrichment_fields": {
            "items": {
              "$ref": "#/components/schemas/EnrichmentField"
            },
            "type": "array",
            "title": "Enrichment Fields",
            "description": "Fields to enrich with taxonomy metadata"
          },
          "retriever": {
            "$ref": "#/components/schemas/RetrieverBinding",
            "description": "Retriever configuration for this collection"
          }
        },
        "type": "object",
        "required": [
          "collection_id",
          "retriever"
        ],
        "title": "CollectionConfig",
        "description": "Configuration for a collection in the taxonomy"
      },
      "CollectionModel": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name for the collection"
          },
          "collection_id": {
            "type": "string",
            "title": "Collection Id",
            "description": "Unique identifier for the collection"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description for the collection"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Optional metadata for the collection"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable or disable processing of this collection",
            "default": true
          },
          "source_lineage": {
            "items": {
              "$ref": "#/components/schemas/SingleLineageEntry"
            },
            "type": "array",
            "title": "Source Lineage",
            "description": "Ordered list of lineage entries, from source to this collection"
          },
          "feature_extractors": {
            "items": {
              "$ref": "#/components/schemas/FeatureExtractorConfig"
            },
            "type": "array",
            "title": "Feature Extractors",
            "description": "List of feature extractor configurations used to create the collection"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "Status of the feature extractors in this collection",
            "default": "PENDING"
          },
          "output_schema": {
            "$ref": "#/components/schemas/BucketSchema-Output",
            "description": "Schema for the collection determined by the feature extractors and their outputs"
          },
          "taxonomy_applications": {
            "items": {
              "$ref": "#/components/schemas/TaxonomyApplicationConfig"
            },
            "type": "array",
            "title": "Taxonomy Applications",
            "description": "List of taxonomy application configurations"
          },
          "cache_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CollectionCacheConfig-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Configuration for collection-level caching"
          }
        },
        "type": "object",
        "required": [
          "collection_name",
          "feature_extractors",
          "output_schema"
        ],
        "title": "CollectionModel",
        "description": "Collection model defining the high-level structure and behavior of a collection.\nCollections are created and modified through feature extractors, which define\ntheir own document handling behavior (create/enrich/replace) through their\ndocument_output_handling settings."
      },
      "CreateBlobRequest": {
        "properties": {
          "property": {
            "type": "string",
            "title": "Property",
            "description": "Property name in the schema that this blob belongs to"
          },
          "key_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key Prefix",
            "description": "Optional prefix for the blob key"
          },
          "type": {
            "$ref": "#/components/schemas/BucketSchemaFieldType",
            "description": "The schema field type this blob corresponds to (e.g., IMAGE, PDF, DOCUMENT)"
          },
          "data": {
            "title": "Data",
            "description": "Data for the blob, this will only be applied to the documents that use this blob"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the blob, this will only be applied to the documents that use this blob"
          }
        },
        "type": "object",
        "required": [
          "property",
          "type",
          "data"
        ],
        "title": "CreateBlobRequest",
        "description": "Request model for creating a new blob"
      },
      "CreateClusterRequest": {
        "properties": {
          "cluster_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cluster Name",
            "description": "Name for the cluster (auto-generated if empty)"
          },
          "collection_id": {
            "type": "string",
            "title": "Collection Id",
            "description": "ID of the collection to cluster"
          },
          "cluster_type": {
            "$ref": "#/components/schemas/ClusterType",
            "default": "vector"
          },
          "vector_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorBasedConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "attribute_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AttributeBasedConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "automatic_naming": {
            "$ref": "#/components/schemas/AutomaticNaming"
          }
        },
        "type": "object",
        "required": [
          "collection_id"
        ],
        "title": "CreateClusterRequest"
      },
      "CreateCollectionRequest": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name for the collection"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description for the collection"
          },
          "source": {
            "$ref": "#/components/schemas/SourceConfig-Input",
            "description": "Source configuration for the collection"
          },
          "feature_extractors": {
            "items": {
              "$ref": "#/components/schemas/FeatureExtractorConfig"
            },
            "type": "array",
            "title": "Feature Extractors",
            "description": "List of feature extractor configurations to use"
          },
          "taxonomy_applications": {
            "items": {
              "$ref": "#/components/schemas/TaxonomyApplicationConfig"
            },
            "type": "array",
            "title": "Taxonomy Applications",
            "description": "List of taxonomy application configurations. there are two options: on ingestion store the taxonomy application results to this collection, or on demand compute the taxonomy application results at query time"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable or disable processing of this collection",
            "default": true
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Optional metadata for the collection"
          },
          "document_handling": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DocumentHandlingConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Configuration for how documents are handled by this extractor"
          },
          "cache_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CollectionCacheConfig-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Configuration for collection-level caching"
          }
        },
        "type": "object",
        "required": [
          "collection_name",
          "source",
          "feature_extractors"
        ],
        "title": "CreateCollectionRequest",
        "description": "Request model for creating a new collection"
      },
      "CreateNamespaceRequest": {
        "properties": {
          "namespace_name": {
            "type": "string",
            "title": "Namespace Name",
            "description": "Name of the namespace to create",
            "example": "spotify_playlists_dev"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the namespace",
            "example": "This namespace contains playlists from Spotify"
          },
          "feature_extractors": {
            "items": {
              "$ref": "#/components/schemas/BasicFeatureExtractor"
            },
            "type": "array",
            "title": "Feature Extractors",
            "description": "List of feature extractors to use",
            "example": [
              {
                "description": "Text extractor",
                "feature_extractor_name": "text-extractor",
                "supported_input_types": [
                  "text"
                ],
                "version": "1.0.0"
              }
            ]
          },
          "payload_indexes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PayloadIndexConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload Indexes",
            "description": "List of payload index configurations",
            "example": [
              {
                "field_name": "metadata.title",
                "field_schema": {
                  "lowercase": true,
                  "max_token_len": 15,
                  "min_token_len": 2,
                  "tokenizer": "word",
                  "type": "text"
                },
                "type": "text"
              },
              {
                "field_name": "metadata.description",
                "field_schema": {
                  "is_tenant": true,
                  "type": "keyword"
                },
                "type": "keyword"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "namespace_name"
        ],
        "title": "CreateNamespaceRequest",
        "description": "Request schema for creating a new namespace"
      },
      "CreateObjectRequest": {
        "properties": {
          "key_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key Prefix",
            "description": "Storage key/path prefix of the object, this will be used to retrieve the object from the storage. It's at the root of the object.",
            "example": "/contract-2024"
          },
          "blobs": {
            "items": {
              "$ref": "#/components/schemas/CreateBlobRequest"
            },
            "type": "array",
            "title": "Blobs",
            "description": "List of blobs to be created in this object",
            "example": [
              {
                "data": {
                  "num_pages": 5,
                  "title": "Service Agreement 2024"
                },
                "key_prefix": "/content.pdf",
                "metadata": {
                  "author": "John Doe",
                  "department": "Legal"
                },
                "property": "content",
                "type": "PDF"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata for the object, this will be appended in all downstream documents of the your connected collections.",
            "example": {
              "category": "contracts",
              "status": "draft",
              "year": 2024
            }
          },
          "skip_duplicates": {
            "type": "boolean",
            "title": "Skip Duplicates",
            "description": "Skip duplicate blobs, if a blob with the same hash already exists, it will be skipped.",
            "default": false
          }
        },
        "type": "object",
        "title": "CreateObjectRequest",
        "description": "Request model for creating a bucket object",
        "example": {
          "blobs": [
            {
              "data": {
                "num_pages": 5,
                "title": "Service Agreement 2024"
              },
              "key_prefix": "/contract-2024/content.pdf",
              "metadata": {
                "author": "John Doe",
                "department": "Legal"
              },
              "property": "content",
              "type": "json"
            },
            {
              "data": {
                "filename": "https://example.com/images/smartphone-x1.jpg",
                "mime_type": "image/jpeg"
              },
              "key_prefix": "/contract-2024/thumbnail.jpg",
              "metadata": {
                "height": 300,
                "width": 200
              },
              "property": "thumbnail",
              "type": "image"
            }
          ],
          "key_prefix": "/documents",
          "metadata": {
            "category": "contracts",
            "status": "draft",
            "year": 2024
          }
        }
      },
      "CreateRetrieverRequest": {
        "properties": {
          "retriever_name": {
            "type": "string",
            "title": "Retriever Name",
            "description": "Name of the retriever"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the retriever"
          },
          "input_schema": {
            "$ref": "#/components/schemas/BucketSchema-Input",
            "description": "Schema defining the expected input format"
          },
          "collection_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collection Ids",
            "description": "List of collection IDs to search in"
          },
          "stages": {
            "items": {
              "$ref": "#/components/schemas/StageConfig-Input"
            },
            "type": "array",
            "title": "Stages",
            "description": "List of stages to execute in order"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "cache_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RetrieverCacheConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Configuration for retriever-level caching"
          }
        },
        "type": "object",
        "required": [
          "retriever_name",
          "input_schema",
          "collection_ids",
          "stages"
        ],
        "title": "CreateRetrieverRequest",
        "description": "Request to create a new retriever"
      },
      "CreateTaxonomyRequest": {
        "properties": {
          "taxonomy_name": {
            "type": "string",
            "title": "Taxonomy Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "config": {
            "$ref": "#/components/schemas/TaxonomyConfig"
          }
        },
        "type": "object",
        "required": [
          "taxonomy_name",
          "config"
        ],
        "title": "CreateTaxonomyRequest",
        "description": "Request to create a new taxonomy"
      },
      "DatetimeIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "datetime"
          }
        },
        "type": "object",
        "title": "DatetimeIndexParams",
        "description": "Configuration for datetime index"
      },
      "DocumentHandlingConfig": {
        "properties": {
          "output_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DocumentOutputType"
              },
              {
                "type": "null"
              }
            ],
            "description": "How this extractor produces documents (single or multiple)"
          }
        },
        "type": "object",
        "title": "DocumentHandlingConfig",
        "description": "Configuration for how documents are handled during processing and updates"
      },
      "DocumentInputHandling": {
        "type": "string",
        "enum": [
          "individual",
          "grouped"
        ],
        "title": "DocumentInputHandling",
        "description": "How documents are provided to the feature extractor"
      },
      "DocumentListResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DocumentResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "next_offset_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Offset Id"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total"
        ],
        "title": "DocumentListResponse",
        "description": "Model for paginated document list response"
      },
      "DocumentOutputHandling": {
        "type": "string",
        "enum": [
          "create_new"
        ],
        "title": "DocumentOutputHandling",
        "description": "Enum for document output handling types"
      },
      "DocumentOutputType": {
        "type": "string",
        "enum": [
          "single",
          "multiple"
        ],
        "title": "DocumentOutputType",
        "description": "Enum for document output types"
      },
      "DocumentResponse": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id",
            "description": "Unique identifier for the document"
          },
          "collection_id": {
            "type": "string",
            "title": "Collection Id",
            "description": "ID of the collection this document belongs to"
          },
          "internal_id": {
            "type": "string",
            "title": "Internal Id",
            "description": "Internal organization ID"
          },
          "namespace_id": {
            "type": "string",
            "title": "Namespace Id",
            "description": "Namespace ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "vectors": {
            "additionalProperties": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Vectors"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "collection_id",
          "internal_id",
          "namespace_id"
        ],
        "title": "DocumentResponse",
        "description": "Model for document response"
      },
      "DocumentUpdate": {
        "properties": {
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "vectors": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vectors"
          }
        },
        "type": "object",
        "title": "DocumentUpdate",
        "description": "Model for updating an existing document"
      },
      "EnrichmentField": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name",
            "description": "Name of the field to enrich"
          },
          "append": {
            "type": "boolean",
            "title": "Append",
            "description": "Whether to append to existing values or replace them",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "field_name"
        ],
        "title": "EnrichmentField",
        "description": "Configuration for how a field should be enriched"
      },
      "ErrorDetail": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": [
          "message",
          "type"
        ],
        "title": "ErrorDetail"
      },
      "ErrorResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": false
          },
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "error": {
            "$ref": "#/components/schemas/ErrorDetail"
          }
        },
        "type": "object",
        "required": [
          "status",
          "error"
        ],
        "title": "ErrorResponse"
      },
      "FeatureExtractorConfig": {
        "properties": {
          "feature_extractor_name": {
            "type": "string",
            "title": "Feature Extractor Name",
            "description": "Name of the feature extractor"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the feature extractor"
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "Custom parameters for the extractor"
          },
          "input_mapping": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Input Mapping",
            "description": "Maps pipeline inputs to extractor inputs (source -\u003e target)"
          },
          "output_mapping": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Output Mapping",
            "description": "Maps extractor outputs to pipeline outputs (source -\u003e target)"
          },
          "document_output_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DocumentOutputType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Type of document output produced by the extractor"
          },
          "document_input_handling": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DocumentInputHandling"
              },
              {
                "type": "null"
              }
            ],
            "description": "How documents are provided to the extractor"
          },
          "document_output_handling": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DocumentOutputHandling"
              },
              {
                "type": "null"
              }
            ],
            "description": "How extractor output is handled for documents"
          }
        },
        "type": "object",
        "required": [
          "feature_extractor_name",
          "version"
        ],
        "title": "FeatureExtractorConfig",
        "description": "Configuration for a feature extractor that is selected for use within a collection.\nThis model represents a selected feature extractor along with its specific configuration\nfor a particular collection.\nThis gets stored in the collection settings."
      },
      "FeatureExtractorDefinition": {
        "properties": {
          "feature_id": {
            "type": "string",
            "title": "Feature Id",
            "description": "Unique identifier for the feature extractor",
            "default": ""
          },
          "feature_extractor_name": {
            "type": "string",
            "title": "Feature Extractor Name",
            "description": "Name of the feature extractor"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the feature extractor"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the feature extractor"
          },
          "module_path": {
            "type": "string",
            "title": "Module Path",
            "description": "Python module path for the feature extractor"
          },
          "input_schema": {
            "type": "object",
            "title": "Input Schema",
            "description": "Schema for input data"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema",
            "description": "Schema for output data"
          },
          "parameter_schema": {
            "type": "object",
            "title": "Parameter Schema",
            "description": "Schema for parameters"
          },
          "supported_input_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Input Types",
            "description": "Supported input types"
          },
          "max_inputs": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Max Inputs",
            "description": "Maximum number of inputs of each type"
          },
          "default_parameters": {
            "type": "object",
            "title": "Default Parameters",
            "description": "Default parameters"
          },
          "document_output_type": {
            "$ref": "#/components/schemas/DocumentOutputType",
            "description": "Type of document output produced by the extractor",
            "default": "single"
          },
          "document_input_handling": {
            "$ref": "#/components/schemas/DocumentInputHandling",
            "description": "How documents are provided to the extractor",
            "default": "individual"
          },
          "document_output_handling": {
            "$ref": "#/components/schemas/DocumentOutputHandling",
            "description": "How extractor output is handled for documents",
            "default": "create_new"
          },
          "required_vector_indexes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VectorIndexDefinition"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Vector Indexes",
            "description": "Vector indexes required by the extractor"
          },
          "required_payload_indexes": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Payload Indexes",
            "description": "Payload indexes required by the extractor"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "feature_extractor_name",
          "description",
          "version",
          "module_path"
        ],
        "title": "FeatureExtractorDefinition",
        "description": "Definition of a feature extractor."
      },
      "FilterCondition": {
        "properties": {
          "field": {
            "type": "string",
            "title": "Field",
            "description": "Field name to filter on"
          },
          "operator": {
            "$ref": "#/components/schemas/FilterOperator",
            "description": "Comparison operator",
            "default": "eq"
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "Value to compare against"
          }
        },
        "type": "object",
        "required": [
          "field"
        ],
        "title": "FilterCondition",
        "description": "Represents a single filter condition.\n\nAttributes:\n    field: The field to filter on\n    operator: The comparison operator\n    value: The value to compare against"
      },
      "FilterOperator": {
        "type": "string",
        "enum": [
          "eq",
          "ne",
          "gt",
          "lt",
          "gte",
          "lte",
          "in",
          "nin",
          "contains",
          "starts_with",
          "ends_with",
          "regex",
          "exists",
          "is_null",
          "text"
        ],
        "title": "FilterOperator",
        "description": "Supported filter operators across database implementations."
      },
      "FloatIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "float"
          }
        },
        "type": "object",
        "title": "FloatIndexParams",
        "description": "Configuration for float index"
      },
      "GenerativeModels": {
        "type": "string",
        "enum": [
          "gpt-4",
          "claude-3-5-sonnet",
          "gemini-1.5-flash"
        ],
        "title": "GenerativeModels"
      },
      "GenericSuccessResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "GenericSuccessResponse"
      },
      "GeoIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "geo"
          }
        },
        "type": "object",
        "title": "GeoIndexParams",
        "description": "Configuration for geo index"
      },
      "GetUsageRequestModel": {
        "properties": {
          "time_range": {
            "$ref": "#/components/schemas/UsageTimeRange",
            "description": "Time range for usage data retrieval",
            "default": "30d"
          },
          "custom_start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Start Date",
            "description": "Custom start date if time_range is 'custom'"
          },
          "custom_end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom End Date",
            "description": "Custom end date if time_range is 'custom'"
          },
          "include_namespace_breakdown": {
            "type": "boolean",
            "title": "Include Namespace Breakdown",
            "description": "Whether to include usage breakdown by namespace",
            "default": true
          },
          "history_aggregation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AggregationType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Aggregation level for historical data",
            "default": "daily"
          },
          "namespaces": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Namespaces",
            "description": "Filter to specific namespaces (all if not specified)"
          }
        },
        "type": "object",
        "title": "GetUsageRequestModel",
        "description": "Request model for customizing usage data retrieval"
      },
      "HDBSCANParameters": {
        "properties": {
          "min_cluster_size": {
            "type": "integer",
            "title": "Min Cluster Size",
            "description": "Minimum number of samples in each cluster",
            "default": 3
          },
          "min_samples": {
            "type": "integer",
            "title": "Min Samples",
            "description": "Controls how conservative clustering is",
            "default": 3
          },
          "umap_neighbors": {
            "type": "integer",
            "title": "Umap Neighbors",
            "description": "Controls local versus global structure",
            "default": 15
          }
        },
        "type": "object",
        "title": "HDBSCANParameters"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthCheckResponse"
      },
      "IntegerIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "integer"
          },
          "lookup": {
            "type": "boolean",
            "title": "Lookup",
            "default": true
          },
          "range": {
            "type": "boolean",
            "title": "Range",
            "default": true
          }
        },
        "type": "object",
        "title": "IntegerIndexParams",
        "description": "Configuration for integer index"
      },
      "InteractionResponse": {
        "properties": {
          "feature_id": {
            "type": "string",
            "title": "Feature Id",
            "description": "ID of the item that was interacted with",
            "example": "prod_123"
          },
          "interaction_type": {
            "items": {
              "$ref": "#/components/schemas/InteractionType"
            },
            "type": "array",
            "title": "Interaction Type",
            "description": "Type of interaction or feedback",
            "example": [
              "positive_feedback",
              "click",
              "long_view"
            ]
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Position in search results where interaction occurred",
            "example": 3
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional context about the interaction",
            "example": {
              "device": "mobile",
              "duration_ms": 5000,
              "interaction_reason": "not_relevant",
              "page": "search_results",
              "page_number": 1,
              "results_count": 50,
              "search_latency_ms": 150,
              "viewport_position": 0.75
            }
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Customer's authenticated user identifier - persists across sessions",
            "example": "customer_user_456"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Temporary identifier for a single search journey/session (typically 30min-1hr) - tracks anonymous and authenticated users",
            "example": "sess_abc123"
          },
          "interaction_id": {
            "type": "string",
            "title": "Interaction Id",
            "description": "Unique identifier for this interaction",
            "example": "int_xyz789"
          }
        },
        "type": "object",
        "required": [
          "feature_id",
          "interaction_type",
          "interaction_id"
        ],
        "title": "InteractionResponse"
      },
      "InteractionType": {
        "type": "string",
        "enum": [
          "view",
          "click",
          "positive_feedback",
          "negative_feedback",
          "purchase",
          "add_to_cart",
          "wishlist",
          "long_view",
          "share",
          "bookmark",
          "query_refinement",
          "zero_results",
          "filter_toggle",
          "skip",
          "return_to_results"
        ],
        "title": "InteractionType"
      },
      "InvalidationEvent": {
        "properties": {
          "collection": {
            "type": "string",
            "title": "Collection",
            "description": "Collection ID to monitor"
          },
          "action": {
            "type": "string",
            "title": "Action",
            "description": "Action that triggers invalidation (create, update, delete)"
          },
          "recompute_strategy": {
            "$ref": "#/components/schemas/RecomputeStrategy",
            "description": "Strategy for recomputing invalidated entries",
            "default": "background"
          },
          "retriever_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retriever Id",
            "description": "Optional retriever ID for retriever-specific invalidation"
          }
        },
        "type": "object",
        "required": [
          "collection",
          "action"
        ],
        "title": "InvalidationEvent",
        "description": "Event that triggers cache invalidation"
      },
      "InvalidationStrategy": {
        "type": "string",
        "enum": [
          "replace_if_better",
          "replace_always",
          "keep_existing"
        ],
        "title": "InvalidationStrategy",
        "description": "Strategies for cache invalidation"
      },
      "KeywordIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "keyword"
          },
          "is_tenant": {
            "type": "boolean",
            "title": "Is Tenant",
            "default": false
          }
        },
        "type": "object",
        "title": "KeywordIndexParams",
        "description": "Configuration for keyword index"
      },
      "ListBucketsRequest": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply to the bucket list"
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sort options for the bucket list"
          },
          "search": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search",
            "description": "Search term to filter buckets by name or description"
          }
        },
        "type": "object",
        "title": "ListBucketsRequest",
        "description": "Request model for listing buckets"
      },
      "ListBucketsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/BucketResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListBucketsResponse",
        "description": "Response model for listing buckets"
      },
      "ListObjectsRequest": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply to the object list"
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sort options for the object list"
          },
          "search": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search",
            "description": "Search term to filter objects by key or metadata"
          }
        },
        "type": "object",
        "title": "ListObjectsRequest",
        "description": "Request model for listing objects in a bucket"
      },
      "ListObjectsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ObjectResponse"
            },
            "type": "array",
            "title": "Results",
            "description": "List of objects matching the query"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResponse",
            "description": "Pagination information"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListObjectsResponse",
        "description": "Response model for listing objects in a bucket"
      },
      "ListTasksResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/TaskResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListTasksResponse"
      },
      "LogicalOperator-Input": {
        "properties": {
          "AND": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator-Input"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "And",
            "description": "Logical AND operation - all conditions must be true",
            "example": [
              {
                "field": "name",
                "operator": "eq",
                "value": "John"
              },
              {
                "field": "age",
                "operator": "gte",
                "value": 30
              }
            ]
          },
          "OR": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator-Input"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Or",
            "description": "Logical OR operation - at least one condition must be true",
            "example": [
              {
                "field": "status",
                "operator": "eq",
                "value": "active"
              },
              {
                "field": "role",
                "operator": "eq",
                "value": "admin"
              }
            ]
          },
          "NOT": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator-Input"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Not",
            "description": "Logical NOT operation - all conditions must be false",
            "example": [
              {
                "field": "department",
                "operator": "eq",
                "value": "HR"
              },
              {
                "field": "location",
                "operator": "eq",
                "value": "remote"
              }
            ]
          },
          "case_sensitive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Case Sensitive",
            "description": "Whether to perform case-sensitive matching",
            "default": false,
            "example": true
          }
        },
        "type": "object",
        "title": "LogicalOperator",
        "description": "Represents a logical operation (AND, OR, NOT) on filter conditions.\n\nAttributes:\n    AND: List of conditions that must all be true\n    OR: List of conditions where at least one must be true\n    NOT: List of conditions that must all be false\n    case_sensitive: Whether string comparisons are case sensitive"
      },
      "LogicalOperator-Output": {
        "properties": {
          "AND": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator-Output"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "And",
            "description": "Logical AND operation - all conditions must be true",
            "example": [
              {
                "field": "name",
                "operator": "eq",
                "value": "John"
              },
              {
                "field": "age",
                "operator": "gte",
                "value": 30
              }
            ]
          },
          "OR": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator-Output"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Or",
            "description": "Logical OR operation - at least one condition must be true",
            "example": [
              {
                "field": "status",
                "operator": "eq",
                "value": "active"
              },
              {
                "field": "role",
                "operator": "eq",
                "value": "admin"
              }
            ]
          },
          "NOT": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator-Output"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Not",
            "description": "Logical NOT operation - all conditions must be false",
            "example": [
              {
                "field": "department",
                "operator": "eq",
                "value": "HR"
              },
              {
                "field": "location",
                "operator": "eq",
                "value": "remote"
              }
            ]
          },
          "case_sensitive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Case Sensitive",
            "description": "Whether to perform case-sensitive matching",
            "default": false,
            "example": true
          }
        },
        "type": "object",
        "title": "LogicalOperator",
        "description": "Represents a logical operation (AND, OR, NOT) on filter conditions.\n\nAttributes:\n    AND: List of conditions that must all be true\n    OR: List of conditions where at least one must be true\n    NOT: List of conditions that must all be false\n    case_sensitive: Whether string comparisons are case sensitive"
      },
      "MultiVectorIndex": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "vectors": {
            "additionalProperties": {
              "$ref": "#/components/schemas/VectorIndex"
            },
            "type": "object",
            "title": "Vectors"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "vectors"
        ],
        "title": "MultiVectorIndex",
        "description": "Configuration for multi-vector indexes"
      },
      "NamespaceResponse": {
        "properties": {
          "namespace_id": {
            "type": "string",
            "title": "Namespace Id"
          },
          "namespace_name": {
            "type": "string",
            "title": "Namespace Name"
          },
          "embedding_models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Embedding Models"
          },
          "payload_indexes": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload Indexes"
          }
        },
        "type": "object",
        "required": [
          "namespace_id",
          "namespace_name",
          "embedding_models",
          "payload_indexes"
        ],
        "title": "NamespaceResponse"
      },
      "NamespaceUsage": {
        "properties": {
          "namespace_id": {
            "type": "string",
            "title": "Namespace Id",
            "description": "Namespace ID"
          },
          "namespace_name": {
            "type": "string",
            "title": "Namespace Name",
            "description": "Namespace name"
          },
          "storage_used_gb": {
            "type": "number",
            "title": "Storage Used Gb",
            "description": "Storage used in GB"
          },
          "api_calls_30d": {
            "type": "integer",
            "title": "Api Calls 30D",
            "description": "API calls in the last 30 days"
          },
          "documents_count": {
            "type": "integer",
            "title": "Documents Count",
            "description": "Number of documents"
          },
          "last_activity": {
            "type": "string",
            "format": "date-time",
            "title": "Last Activity",
            "description": "Timestamp of last activity"
          }
        },
        "type": "object",
        "required": [
          "namespace_id",
          "namespace_name",
          "storage_used_gb",
          "api_calls_30d",
          "documents_count",
          "last_activity"
        ],
        "title": "NamespaceUsage",
        "description": "Usage statistics for a single namespace"
      },
      "NamingMethod": {
        "type": "string",
        "enum": [
          "centroid"
        ],
        "title": "NamingMethod"
      },
      "ObjectResponse": {
        "properties": {
          "object_id": {
            "type": "string",
            "title": "Object Id",
            "description": "Unique identifier for the object"
          },
          "bucket_id": {
            "type": "string",
            "title": "Bucket Id",
            "description": "ID of the bucket this object belongs to"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id",
            "description": "ID of the task that created this object, used to track the object creation progress and status"
          },
          "key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key",
            "description": "Storage key/path of the object, used to retrieve the object from storage"
          },
          "blobs": {
            "items": {
              "$ref": "#/components/schemas/BlobModel"
            },
            "type": "array",
            "title": "Blobs",
            "description": "List of blobs contained in this object"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus",
            "description": "Status of the object (PENDING, PROCESSING, COMPLETED, FAILED)"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata for the object, appended to downstream documents of connected collections"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By",
            "description": "Identifier of the entity that created this object"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if the object processing failed"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Timestamp when the object was created"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Timestamp when the object was last updated"
          }
        },
        "type": "object",
        "required": [
          "object_id",
          "bucket_id",
          "blobs",
          "status",
          "metadata"
        ],
        "title": "ObjectResponse",
        "description": "Response model for bucket objects",
        "example": {
          "blobs": [
            {
              "data": {
                "num_pages": 5,
                "title": "Service Agreement 2024"
              },
              "details": {
                "filename": "agreement.pdf",
                "hash": "sha256:a1b2c3d4e5f6...",
                "mime_type": "application/pdf",
                "s3_object_key": "tenant123/object456/content.pdf",
                "size_bytes": 1245678
              },
              "key": "/contract-2024/content.pdf",
              "metadata": {
                "author": "John Doe",
                "department": "Legal"
              },
              "property": "content",
              "status": "COMPLETED",
              "type": "PDF"
            }
          ],
          "bucket_id": "bkt_12345678",
          "created_at": "2024-06-01T10:30:00Z",
          "created_by": "user_12345",
          "key": "/documents/contract-2024",
          "metadata": {
            "category": "contracts",
            "status": "active",
            "year": 2024
          },
          "object_id": "obj_a1b2c3d4e5f6",
          "status": "COMPLETED",
          "task_id": "task_87654321",
          "updated_at": "2024-06-01T10:35:12Z"
        }
      },
      "OrganizationModel": {
        "properties": {
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "internal_id": {
            "type": "string",
            "title": "Internal Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "account_type": {
            "type": "string",
            "title": "Account Type",
            "default": "free"
          },
          "credit_count": {
            "type": "integer",
            "title": "Credit Count",
            "default": 1000
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserModel-Output"
            },
            "type": "array",
            "title": "Users"
          }
        },
        "type": "object",
        "required": [
          "organization_name"
        ],
        "title": "OrganizationModel"
      },
      "PaginationResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "next_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page"
          },
          "previous_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Page"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "page_size",
          "total_pages",
          "next_page",
          "previous_page"
        ],
        "title": "PaginationResponse"
      },
      "PayloadIndexConfig": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "type": {
            "$ref": "#/components/schemas/PayloadSchemaType"
          },
          "field_schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextIndexParams"
              },
              {
                "$ref": "#/components/schemas/IntegerIndexParams"
              },
              {
                "$ref": "#/components/schemas/KeywordIndexParams"
              },
              {
                "$ref": "#/components/schemas/FloatIndexParams"
              },
              {
                "$ref": "#/components/schemas/GeoIndexParams"
              },
              {
                "$ref": "#/components/schemas/DatetimeIndexParams"
              },
              {
                "$ref": "#/components/schemas/UuidIndexParams"
              },
              {
                "$ref": "#/components/schemas/BoolIndexParams"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Schema"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "type"
        ],
        "title": "PayloadIndexConfig",
        "description": "Configuration for a payload index"
      },
      "PayloadSchemaType": {
        "type": "string",
        "enum": [
          "keyword",
          "integer",
          "float",
          "bool",
          "geo",
          "datetime",
          "text",
          "uuid"
        ],
        "title": "PayloadSchemaType"
      },
      "Permission": {
        "type": "string",
        "enum": [
          "read",
          "write",
          "view",
          "create",
          "update",
          "delete",
          "super",
          "admin",
          "manage_users",
          "manage_billing",
          "manage_settings",
          "read_public",
          "read_private",
          "write_public",
          "write_private"
        ],
        "title": "Permission"
      },
      "Plan": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Display name of the plan"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Plan description"
          },
          "price_monthly_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price Monthly Usd",
            "description": "Monthly price in USD"
          },
          "price_yearly_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price Yearly Usd",
            "description": "Yearly price in USD"
          },
          "totals": {
            "$ref": "#/components/schemas/ResourceTotals",
            "description": "Resource totals for this plan"
          },
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Features",
            "description": "Available features for extraction"
          }
        },
        "type": "object",
        "required": [
          "name",
          "totals"
        ],
        "title": "Plan",
        "description": "Subscription plan model"
      },
      "RecomputeStrategy": {
        "type": "string",
        "enum": [
          "immediate",
          "background",
          "lazy"
        ],
        "title": "RecomputeStrategy",
        "description": "Strategies for recomputing cache entries"
      },
      "ResourceTotals": {
        "properties": {
          "storage_gb": {
            "type": "number",
            "title": "Storage Gb",
            "description": "Total storage in GB"
          },
          "api_calls_per_month": {
            "type": "integer",
            "title": "Api Calls Per Month",
            "description": "Total API calls per month"
          },
          "documents": {
            "type": "integer",
            "title": "Documents",
            "description": "Total number of documents"
          },
          "collections": {
            "type": "integer",
            "title": "Collections",
            "description": "Total number of collections"
          },
          "namespaces": {
            "type": "integer",
            "title": "Namespaces",
            "description": "Total number of namespaces"
          }
        },
        "type": "object",
        "required": [
          "storage_gb",
          "api_calls_per_month",
          "documents",
          "collections",
          "namespaces"
        ],
        "title": "ResourceTotals",
        "description": "Resource totals for the organization"
      },
      "RetrieverBinding": {
        "properties": {
          "retriever_id": {
            "type": "string",
            "title": "Retriever Id",
            "description": "ID of the retriever to use"
          },
          "inputs": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inputs",
            "description": "Optional inputs to the retriever. If not provided, will use source collection schema"
          }
        },
        "type": "object",
        "required": [
          "retriever_id"
        ],
        "title": "RetrieverBinding",
        "description": "How a retriever should be used in a taxonomy"
      },
      "RetrieverCacheConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether caching is enabled for this retriever",
            "default": true
          },
          "ttl_seconds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ttl Seconds",
            "description": "Optional retriever-specific TTL override"
          },
          "score_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score Threshold",
            "description": "Optional retriever-specific score threshold"
          }
        },
        "type": "object",
        "title": "RetrieverCacheConfig",
        "description": "Configuration for retriever-specific caching"
      },
      "RetrieverModel": {
        "properties": {
          "retriever_id": {
            "type": "string",
            "title": "Retriever Id",
            "description": "Unique identifier for the retriever"
          },
          "retriever_name": {
            "type": "string",
            "title": "Retriever Name",
            "description": "Name of the retriever"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the retriever"
          },
          "input_schema": {
            "$ref": "#/components/schemas/BucketSchema-Output",
            "description": "Schema defining the expected input format"
          },
          "collection_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collection Ids",
            "description": "List of collection IDs to search in"
          },
          "stages": {
            "items": {
              "$ref": "#/components/schemas/StageConfig-Output"
            },
            "type": "array",
            "title": "Stages",
            "description": "List of stages to execute in order"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "cache_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RetrieverCacheConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Configuration for retriever-level caching"
          }
        },
        "type": "object",
        "required": [
          "retriever_name",
          "input_schema",
          "collection_ids",
          "stages"
        ],
        "title": "RetrieverModel",
        "description": "Definition of a retriever"
      },
      "RetrieverQueryRequest": {
        "properties": {
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "Input values for the retriever query. These map to the required inputs defined in the retriever's first stage."
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Logical operations for filtering results. Can include AND, OR, NOT conditions with field comparisons."
          },
          "sorts": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SortOption"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sorts",
            "description": "Controls the ordering of results. Can sort by score (default) or any other document field. This sorts the results from the last stage."
          },
          "limit": {
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "title": "Limit",
            "description": "Maximum number of results to return. Overrides the default pagination limit in the retriever definition.",
            "default": 10
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "title": "Offset",
            "description": "Number of results to skip. Use with limit for pagination. For large offsets, consider using session_id for cursor-based pagination.",
            "default": 0
          },
          "select": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Select",
            "description": "Specific fields to include in the response. If not specified, returns all fields."
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Session identifier for interaction tracking."
          },
          "return_urls": {
            "type": "boolean",
            "title": "Return Urls",
            "description": "When true, generates pre-signed URLs for any media assets in the results. May increase response time slightly.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "inputs"
        ],
        "title": "RetrieverQueryRequest",
        "description": "Query parameters for executing a retriever pipeline.\n\nThis model defines all the parameters that can be provided when running a\nsearch using a predefined retriever pipeline. It allows for customizing the\nquery inputs, filtering, sorting, pagination, and result formatting."
      },
      "RetrieverResponse": {
        "properties": {
          "execution_time": {
            "type": "number",
            "title": "Execution Time"
          },
          "stage_results": {
            "items": {
              "$ref": "#/components/schemas/StageResponse"
            },
            "type": "array",
            "title": "Stage Results",
            "description": "Results from each stage execution"
          }
        },
        "type": "object",
        "required": [
          "execution_time"
        ],
        "title": "RetrieverResponse",
        "description": "Response from a retriever execution"
      },
      "SearchInteraction": {
        "properties": {
          "feature_id": {
            "type": "string",
            "title": "Feature Id",
            "description": "ID of the item that was interacted with",
            "example": "prod_123"
          },
          "interaction_type": {
            "items": {
              "$ref": "#/components/schemas/InteractionType"
            },
            "type": "array",
            "title": "Interaction Type",
            "description": "Type of interaction or feedback",
            "example": [
              "positive_feedback",
              "click",
              "long_view"
            ]
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Position in search results where interaction occurred",
            "example": 3
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional context about the interaction",
            "example": {
              "device": "mobile",
              "duration_ms": 5000,
              "interaction_reason": "not_relevant",
              "page": "search_results",
              "page_number": 1,
              "results_count": 50,
              "search_latency_ms": 150,
              "viewport_position": 0.75
            }
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Customer's authenticated user identifier - persists across sessions",
            "example": "customer_user_456"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Temporary identifier for a single search journey/session (typically 30min-1hr) - tracks anonymous and authenticated users",
            "example": "sess_abc123"
          }
        },
        "type": "object",
        "required": [
          "feature_id",
          "interaction_type"
        ],
        "title": "SearchInteraction"
      },
      "SingleLineageEntry": {
        "properties": {
          "source_type": {
            "$ref": "#/components/schemas/SourceType",
            "description": "Type of this entry"
          },
          "collection_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Id",
            "description": "ID of this entry (collection_id)"
          },
          "bucket_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bucket Id",
            "description": "ID of this entry (bucket_id)"
          },
          "bucket_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceConfig-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bucket details if this is a bucket or using a bucket source"
          },
          "collection_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceConfig-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Collection details if this is a collection or using a collection source"
          },
          "feature_extractors": {
            "items": {
              "$ref": "#/components/schemas/FeatureExtractorConfig"
            },
            "type": "array",
            "title": "Feature Extractors",
            "description": "Feature extractors applied"
          },
          "output_schema": {
            "$ref": "#/components/schemas/BucketSchema-Output",
            "description": "Output schema"
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "output_schema"
        ],
        "title": "SingleLineageEntry",
        "description": "A single entry in the collection lineage path"
      },
      "SortDirection": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "title": "SortDirection",
        "description": "Sort direction options."
      },
      "SortOption": {
        "properties": {
          "field": {
            "type": "string",
            "title": "Field",
            "description": "Field to sort by, supports dot notation for nested fields",
            "example": "created_at"
          },
          "direction": {
            "$ref": "#/components/schemas/SortDirection",
            "description": "Sort direction",
            "default": "asc",
            "example": "desc"
          }
        },
        "type": "object",
        "required": [
          "field"
        ],
        "title": "SortOption",
        "description": "Specifies how to sort query results.\n\nAttributes:\n    field: Field to sort by\n    direction: Sort direction (ascending or descending)"
      },
      "SourceConfig-Input": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SourceType",
            "description": "Type of source (bucket or collection)"
          },
          "bucket_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bucket Id",
            "description": "ID of the source bucket"
          },
          "prefix_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix Key",
            "description": "Optional prefix to filter bucket objects"
          },
          "collection_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Id",
            "description": "ID of the source collection"
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional filters to apply to the source collection"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "SourceConfig",
        "description": "Configuration for a collection source"
      },
      "SourceConfig-Output": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SourceType",
            "description": "Type of source (bucket or collection)"
          },
          "bucket_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bucket Id",
            "description": "ID of the source bucket"
          },
          "prefix_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix Key",
            "description": "Optional prefix to filter bucket objects"
          },
          "collection_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Id",
            "description": "ID of the source collection"
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional filters to apply to the source collection"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "SourceConfig",
        "description": "Configuration for a collection source"
      },
      "SourceType": {
        "type": "string",
        "enum": [
          "bucket",
          "collection"
        ],
        "title": "SourceType",
        "description": "Types of entries in a collection lineage"
      },
      "StageConfig-Input": {
        "properties": {
          "stage_name": {
            "type": "string",
            "title": "Stage Name",
            "description": "Name of the stage"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the stage"
          },
          "module_path": {
            "type": "string",
            "title": "Module Path",
            "description": "Python module path for the stage"
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "Parameters for the stage"
          },
          "pre_filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply before the main search is executed"
          },
          "post_filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply to search results after retrieval"
          },
          "timeout_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout Seconds",
            "description": "Maximum execution time for this stage in seconds",
            "default": 10
          },
          "exclude_from_final": {
            "type": "boolean",
            "title": "Exclude From Final",
            "description": "If True, results from this stage are used for subsequent stages but excluded from final output",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "stage_name",
          "version",
          "module_path"
        ],
        "title": "StageConfig",
        "description": "Configuration for how a retriever stage processes queries and handles results.\n\nThis model consolidates stage-specific settings that control behavior\nduring retrieval operations, making it easier to configure stages\nwith consistent options."
      },
      "StageConfig-Output": {
        "properties": {
          "stage_name": {
            "type": "string",
            "title": "Stage Name",
            "description": "Name of the stage"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the stage"
          },
          "module_path": {
            "type": "string",
            "title": "Module Path",
            "description": "Python module path for the stage"
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "Parameters for the stage"
          },
          "pre_filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply before the main search is executed"
          },
          "post_filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply to search results after retrieval"
          },
          "timeout_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout Seconds",
            "description": "Maximum execution time for this stage in seconds",
            "default": 10
          },
          "exclude_from_final": {
            "type": "boolean",
            "title": "Exclude From Final",
            "description": "If True, results from this stage are used for subsequent stages but excluded from final output",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "stage_name",
          "version",
          "module_path"
        ],
        "title": "StageConfig",
        "description": "Configuration for how a retriever stage processes queries and handles results.\n\nThis model consolidates stage-specific settings that control behavior\nduring retrieval operations, making it easier to configure stages\nwith consistent options."
      },
      "StageDefinition": {
        "properties": {
          "stage_name": {
            "type": "string",
            "title": "Stage Name",
            "description": "Name of the stage"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "module_path": {
            "type": "string",
            "title": "Module Path"
          },
          "input_schema": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BucketSchemaField-Output"
            },
            "type": "object",
            "title": "Input Schema"
          },
          "output_schema": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BucketSchemaField-Output"
            },
            "type": "object",
            "title": "Output Schema"
          },
          "parameter_schema": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BucketSchemaField-Output"
            },
            "type": "object",
            "title": "Parameter Schema"
          },
          "supported_input_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Input Types"
          },
          "max_inputs": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Max Inputs"
          },
          "default_parameters": {
            "type": "object",
            "title": "Default Parameters"
          },
          "required_vector_indexes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VectorIndexDefinition"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Vector Indexes"
          },
          "required_payload_indexes": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Payload Indexes"
          },
          "supported_filters": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Filters",
            "description": "List of filter operations supported by this stage"
          }
        },
        "type": "object",
        "required": [
          "stage_name",
          "description",
          "version",
          "module_path",
          "input_schema",
          "output_schema",
          "parameter_schema",
          "supported_input_types",
          "max_inputs",
          "default_parameters"
        ],
        "title": "StageDefinition",
        "description": "Model for retriever stage definition that describes how to process and search documents."
      },
      "StageResponse": {
        "properties": {
          "results": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Results"
          },
          "execution_time": {
            "type": "number",
            "title": "Execution Time"
          },
          "total_results": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Results",
            "description": "Total number of results not filtered by pagination"
          }
        },
        "type": "object",
        "required": [
          "results",
          "execution_time"
        ],
        "title": "StageResponse",
        "description": "Output from a retriever stage"
      },
      "TaskResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus",
            "default": "PENDING"
          },
          "inputs": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inputs"
          },
          "outputs": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outputs"
          }
        },
        "type": "object",
        "required": [
          "task_id"
        ],
        "title": "TaskResponse"
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "DONE",
          "FAILED",
          "SKIPPED",
          "CANCELLED",
          "PROCESSING",
          "DOWNLOADING",
          "INITIALIZING",
          "UPLOADING",
          "QUEUED",
          "PENDING",
          "CONVERTING"
        ],
        "title": "TaskStatus"
      },
      "TaxonomyApplicationConfig": {
        "properties": {
          "taxonomy_id": {
            "type": "string",
            "title": "Taxonomy Id",
            "description": "ID of the taxonomy to apply"
          },
          "output_collection": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Collection",
            "description": "\n        ID or name of the collection to store enriched documents, if none exists, it will be created.\n        If set to None, it will be treated as a temporary enrichment and not stored.\n        "
          }
        },
        "type": "object",
        "required": [
          "taxonomy_id"
        ],
        "title": "TaxonomyApplicationConfig",
        "description": "Configuration for how a taxonomy should be applied and materialized"
      },
      "TaxonomyConfig": {
        "properties": {
          "source_collections": {
            "items": {
              "$ref": "#/components/schemas/CollectionConfig"
            },
            "type": "array",
            "title": "Source Collections"
          }
        },
        "type": "object",
        "required": [
          "source_collections"
        ],
        "title": "TaxonomyConfig",
        "description": "Base configuration for all taxonomy types"
      },
      "TextIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "text"
          },
          "tokenizer": {
            "$ref": "#/components/schemas/TokenizerType",
            "default": "word"
          },
          "min_token_len": {
            "type": "integer",
            "title": "Min Token Len",
            "default": 2
          },
          "max_token_len": {
            "type": "integer",
            "title": "Max Token Len",
            "default": 15
          },
          "lowercase": {
            "type": "boolean",
            "title": "Lowercase",
            "default": true
          }
        },
        "type": "object",
        "title": "TextIndexParams",
        "description": "Configuration for text index"
      },
      "TimeseriesDataPoint": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of the data point"
          },
          "value": {
            "type": "number",
            "title": "Value",
            "description": "Value of the metric"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "value"
        ],
        "title": "TimeseriesDataPoint",
        "description": "Single data point for timeseries data"
      },
      "TimeseriesUsage": {
        "properties": {
          "api_calls": {
            "items": {
              "$ref": "#/components/schemas/TimeseriesDataPoint"
            },
            "type": "array",
            "title": "Api Calls",
            "description": "API calls over time"
          },
          "storage_used": {
            "items": {
              "$ref": "#/components/schemas/TimeseriesDataPoint"
            },
            "type": "array",
            "title": "Storage Used",
            "description": "Storage used over time"
          },
          "documents_processed": {
            "items": {
              "$ref": "#/components/schemas/TimeseriesDataPoint"
            },
            "type": "array",
            "title": "Documents Processed",
            "description": "Documents processed over time"
          },
          "credits_used": {
            "items": {
              "$ref": "#/components/schemas/TimeseriesDataPoint"
            },
            "type": "array",
            "title": "Credits Used",
            "description": "Credits used over time"
          }
        },
        "type": "object",
        "title": "TimeseriesUsage",
        "description": "Timeseries usage data for various metrics"
      },
      "TokenizerType": {
        "type": "string",
        "enum": [
          "word",
          "whitespace",
          "prefix",
          "multilingual"
        ],
        "title": "TokenizerType"
      },
      "UpdateNamespaceRequest": {
        "properties": {
          "namespace_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Namespace Name",
            "description": "Name of the namespace to update",
            "example": "spotify_playlists_dev"
          },
          "payload_indexes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PayloadIndexConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload Indexes",
            "description": "Updated list of payload index configurations",
            "example": [
              {
                "field_name": "metadata.title",
                "field_schema": {
                  "lowercase": true,
                  "max_token_len": 15,
                  "min_token_len": 2,
                  "tokenizer": "word",
                  "type": "text"
                },
                "type": "text"
              },
              {
                "field_name": "metadata.description",
                "field_schema": {
                  "is_tenant": false,
                  "type": "keyword"
                },
                "type": "keyword"
              }
            ]
          }
        },
        "type": "object",
        "title": "UpdateNamespaceRequest",
        "description": "Request schema for updating a namespace's payload indexes"
      },
      "UpdateObjectRequest": {
        "properties": {
          "key_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key Prefix",
            "description": "Updated storage key/path prefix of the object, this will be used to retrieve the object from the storage. It's at the root of the object."
          },
          "blobs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CreateBlobRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blobs",
            "description": "List of new or updated blobs for this object"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Updated metadata for the object, this will be merged with existing metadata."
          },
          "skip_duplicates": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip Duplicates",
            "description": "Skip duplicate blobs, if a blob with the same hash already exists, it will be skipped."
          }
        },
        "type": "object",
        "title": "UpdateObjectRequest",
        "description": "Request model for updating an existing bucket object",
        "example": {
          "blobs": [
            {
              "data": {
                "num_pages": 6,
                "title": "Revised Service Agreement 2024"
              },
              "key_prefix": "/contract-2024-revised",
              "metadata": {
                "author": "Jane Smith",
                "department": "Legal",
                "version": "2.0"
              },
              "property": "content",
              "type": "PDF"
            }
          ],
          "key_prefix": "/updated-documents",
          "metadata": {
            "category": "contracts",
            "reviewed": true,
            "status": "final",
            "year": 2024
          }
        }
      },
      "UsageResponse": {
        "properties": {
          "usage_summary": {
            "$ref": "#/components/schemas/UsageSummary",
            "description": "Current usage summary"
          },
          "namespace_usage": {
            "items": {
              "$ref": "#/components/schemas/NamespaceUsage"
            },
            "type": "array",
            "title": "Namespace Usage",
            "description": "Usage by namespace"
          },
          "usage_history": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TimeseriesUsage"
              },
              {
                "type": "null"
              }
            ],
            "description": "Historical usage data"
          },
          "billing_period_start": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Period Start",
            "description": "Start of current billing period"
          },
          "billing_period_end": {
            "type": "string",
            "format": "date-time",
            "title": "Billing Period End",
            "description": "End of current billing period"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "current_plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Plan"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current subscription plan"
          }
        },
        "type": "object",
        "required": [
          "usage_summary",
          "namespace_usage",
          "billing_period_end",
          "organization_id"
        ],
        "title": "UsageResponse",
        "description": "Complete usage response model"
      },
      "UsageSummary": {
        "properties": {
          "api_calls": {
            "type": "integer",
            "title": "Api Calls",
            "description": "Total API calls in the current period"
          },
          "storage_used_gb": {
            "type": "number",
            "title": "Storage Used Gb",
            "description": "Total storage used in GB"
          },
          "documents_processed": {
            "type": "integer",
            "title": "Documents Processed",
            "description": "Total documents processed"
          },
          "active_collections": {
            "type": "integer",
            "title": "Active Collections",
            "description": "Number of active collections"
          },
          "credits_used": {
            "type": "integer",
            "title": "Credits Used",
            "description": "Total credits used"
          }
        },
        "type": "object",
        "required": [
          "api_calls",
          "storage_used_gb",
          "documents_processed",
          "active_collections",
          "credits_used"
        ],
        "title": "UsageSummary",
        "description": "Summary of current resource usage"
      },
      "UsageTimeRange": {
        "type": "string",
        "enum": [
          "7d",
          "30d",
          "90d",
          "180d",
          "365d",
          "billing_period",
          "custom"
        ],
        "title": "UsageTimeRange",
        "description": "Time ranges for usage data"
      },
      "UserModel-Input": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "user_name": {
            "type": "string",
            "title": "User Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "api_keys": {
            "items": {
              "$ref": "#/components/schemas/APIKey"
            },
            "type": "array",
            "title": "Api Keys"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserModel"
      },
      "UserModel-Output": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "user_name": {
            "type": "string",
            "title": "User Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "api_keys": {
            "items": {
              "$ref": "#/components/schemas/APIKey"
            },
            "type": "array",
            "title": "Api Keys"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserModel"
      },
      "UuidIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "uuid"
          },
          "is_tenant": {
            "type": "boolean",
            "title": "Is Tenant",
            "default": false
          }
        },
        "type": "object",
        "title": "UuidIndexParams",
        "description": "Configuration for UUID index"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VectorBasedConfig": {
        "properties": {
          "feature_extractor_name": {
            "type": "string",
            "title": "Feature Extractor Name",
            "description": "Name of the feature extractor to use for vector-based clustering"
          },
          "clustering_method": {
            "$ref": "#/components/schemas/ClusteringMethod"
          },
          "sample_size": {
            "type": "integer",
            "title": "Sample Size",
            "description": "Maximum number of documents to process",
            "default": 1000
          },
          "hdbscan_parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HDBSCANParameters"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "feature_extractor_name",
          "clustering_method"
        ],
        "title": "VectorBasedConfig"
      },
      "VectorIndex": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "dimensions": {
            "type": "integer",
            "title": "Dimensions"
          },
          "type": {
            "$ref": "#/components/schemas/VectorType"
          },
          "distance": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Distance",
            "default": "cosine"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "dimensions",
          "type"
        ],
        "title": "VectorIndex",
        "description": "Base configuration for vector indexes"
      },
      "VectorIndexDefinition": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "type": "string",
            "enum": [
              "single",
              "multi"
            ],
            "title": "Type"
          },
          "index": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorIndex"
              },
              {
                "$ref": "#/components/schemas/MultiVectorIndex"
              }
            ],
            "title": "Index"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "type",
          "index"
        ],
        "title": "VectorIndexDefinition",
        "description": "Complete vector index definition that can be either single or multi-vector"
      },
      "VectorType": {
        "type": "string",
        "enum": [
          "dense",
          "sparse",
          "int8"
        ],
        "title": "VectorType",
        "description": "Types of vectors supported"
      }
    },
    "securitySchemes": {
      "token": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "x-speakeasy-globals": {
    "parameters": [
      {
        "name": "x-namespace",
        "in": "header",
        "required": false,
        "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
        "title": "X-Namespace",
        "schema": {
          "type": "string"
        }
      }
    ]
  }
}
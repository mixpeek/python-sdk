{
  "openapi": "3.1.0",
  "info": {
    "title": "Mixpeek API",
    "description": "This is the Mixpeek API, providing access to various endpoints for data processing and retrieval.",
    "termsOfService": "https://mixpeek.com/terms",
    "contact": {
      "name": "Mixpeek Support",
      "url": "https://mixpeek.com/contact",
      "email": "info@mixpeek.com"
    },
    "version": "0.81"
  },
  "servers": [
    {
      "url": "https://api.mixpeek.com"
    }
  ],
  "paths": {
    "/healthcheck": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Healthcheck",
        "operationId": "healthcheck_healthcheck_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "check"
      }
    },
    "/v1/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "get_organization_v1_organizations_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/organizations/usage": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Usage",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "get_usage_v1_organizations_usage_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "getUsage"
      }
    },
    "/v1/organizations/users/{user_email}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get User",
        "operationId": "get_user_v1_organizations_users__user_email__get",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel-Output"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete User",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "delete_user_v1_organizations_users__user_email__delete",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users",
        "x-speakeasy-name-override": "delete"
      }
    },
    "/v1/organizations/users": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Add User",
        "description": "**Requirements:**\n- Required permissions: admin",
        "operationId": "add_user_v1_organizations_users_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel-Output"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "addUser"
      }
    },
    "/v1/organizations/users/{user_email}/api-keys": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create Api Key",
        "description": "Create a new API key for a specific user",
        "operationId": "create_api_key_v1_organizations_users__user_email__api_keys_post",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "key_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "title": "Key Name"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "users",
        "x-speakeasy-name-override": "createApiKey"
      }
    },
    "/v1/organizations/users/{user_email}/api-keys/{key_name}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete Api Key",
        "description": "Delete a specific API key for a user",
        "operationId": "delete_api_key_v1_organizations_users__user_email__api_keys__key_name__delete",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "key_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Name"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "deleteApiKey"
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update Api Key",
        "description": "Update an API key's name or permissions",
        "operationId": "update_api_key_v1_organizations_users__user_email__api_keys__key_name__patch",
        "parameters": [
          {
            "name": "user_email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Email"
            }
          },
          {
            "name": "key_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Name"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "updateApiKey"
      }
    },
    "/v1/namespaces": {
      "post": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Create Namespace",
        "description": "Creates a new namespace with the specified configuration",
        "operationId": "create_namespace_v1_namespaces_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNamespaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create"
      },
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "List Namespaces",
        "description": "List all namespaces for a user",
        "operationId": "list_namespaces_v1_namespaces_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  },
                  "title": "Response List Namespaces V1 Namespaces Get"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list"
      }
    },
    "/v1/namespaces/{namespace}": {
      "delete": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Delete Namespace",
        "description": "Deletes an existing namespace using either its name or ID",
        "operationId": "delete_namespace_v1_namespaces__namespace__delete",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the namespace name or namespace ID",
              "examples": [
                "my_namespace",
                "ns_1234567890"
              ],
              "title": "Namespace"
            },
            "description": "Either the namespace name or namespace ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "put": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Update Namespace",
        "description": "Updates an existing namespace's payload indexes, this is a full update",
        "operationId": "update_namespace_v1_namespaces__namespace__put",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the namespace name or namespace ID",
              "examples": [
                "my_namespace",
                "ns_1234567890"
              ],
              "title": "Namespace"
            },
            "description": "Either the namespace name or namespace ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNamespaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update"
      },
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Get Namespace",
        "description": "Retrieve details of a specific namespace using either its name or ID",
        "operationId": "get_namespace_v1_namespaces__namespace__get",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the namespace name or namespace ID",
              "examples": [
                "my_namespace",
                "ns_1234567890"
              ],
              "title": "Namespace"
            },
            "description": "Either the namespace name or namespace ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/namespaces/models": {
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "List Available Models",
        "description": "Returns all available models and their configurations, scoped to the organization",
        "operationId": "list_available_models_v1_namespaces_models_get",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableModelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "listModels"
      }
    },
    "/v1/features/{feature_id}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Get Feature",
        "operationId": "get_feature_v1_features__feature_id__get",
        "parameters": [
          {
            "name": "feature_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Feature Id"
            }
          },
          {
            "name": "return_vectors",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "When true, includes the feature's vector embeddings in the response",
              "default": false,
              "title": "Return Vectors"
            },
            "description": "When true, includes the feature's vector embeddings in the response"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "summary": "Delete Feature",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "delete_feature_v1_features__feature_id__delete",
        "parameters": [
          {
            "name": "feature_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Feature Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "put": {
        "tags": [
          "Features"
        ],
        "summary": "Full Feature Update",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "full_feature_update_v1_features__feature_id__put",
        "parameters": [
          {
            "name": "feature_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Feature Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update"
      }
    },
    "/v1/features": {
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "List Features",
        "description": "Retrieves a list of features based on\n    the provided filters and sorting criteria. \n    If you provide a sort, then pagination isn't supported.",
        "operationId": "list_features_v1_features_post",
        "parameters": [
          {
            "name": "offset_feature_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The offset id to start returning results from. Used for pagination",
              "title": "Offset Feature Id"
            },
            "description": "The offset id to start returning results from. Used for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListFeaturesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFeaturesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list"
      }
    },
    "/v1/features/search": {
      "post": {
        "tags": [
          "Feature Search"
        ],
        "summary": "Search Features",
        "description": "This endpoint allows you to search features.",
        "operationId": "search_features_v1_features_search_post",
        "parameters": [
          {
            "name": "offset_position",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The position to start returning results from. Used for pagination. Does not work with group_by",
              "title": "Offset Position"
            },
            "description": "The position to start returning results from. Used for pagination. Does not work with group_by",
            "example": 0
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of results to return per page.",
              "default": 10,
              "title": "Page Size"
            },
            "description": "Number of results to return per page.",
            "example": 10
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestFeatures"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Search Features V1 Features Search Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "features",
        "x-speakeasy-name-override": "search"
      }
    },
    "/v1/features/extractors/embed": {
      "post": {
        "tags": [
          "Feature Extractors"
        ],
        "summary": "Extract Embeddings",
        "operationId": "extract_embeddings_v1_features_extractors_embed_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureExtractionEmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "featureExtractors",
        "x-speakeasy-name-override": "extractEmbeddings"
      }
    },
    "/v1/ingest/text": {
      "post": {
        "tags": [
          "Ingest Assets"
        ],
        "summary": "Ingest Text",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "ingest_text_v1_ingest_text_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessTextInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "ingestAssets",
        "x-speakeasy-name-override": "ingestText"
      }
    },
    "/v1/ingest/videos/url": {
      "post": {
        "tags": [
          "Ingest Assets"
        ],
        "summary": "Ingest Video Url",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "ingest_video_url_v1_ingest_videos_url_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessVideoURLInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "ingestAssets",
        "x-speakeasy-name-override": "ingestVideoUrl"
      }
    },
    "/v1/ingest/images/url": {
      "post": {
        "tags": [
          "Ingest Assets"
        ],
        "summary": "Ingest Image Url",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "ingest_image_url_v1_ingest_images_url_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessImageURLInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "ingestAssets",
        "x-speakeasy-name-override": "ingestImageUrl"
      }
    },
    "/v1/entities/taxonomies": {
      "post": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Create Taxonomy",
        "description": "Register new taxonomies with their descriptions\n\n**Requirements:**\n- Required permissions: write",
        "operationId": "create_taxonomy_v1_entities_taxonomies_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxonomyCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "create"
      },
      "get": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "List Taxonomies",
        "description": "Get all taxonomies for the current namespace",
        "operationId": "list_taxonomies_v1_entities_taxonomies_get",
        "parameters": [
          {
            "name": "offset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The offset id to start returning results from. Used for pagination",
              "title": "Offset Id"
            },
            "description": "The offset id to start returning results from. Used for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTaxonomiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "list"
      }
    },
    "/v1/entities/taxonomies/{taxonomy}": {
      "get": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Get Taxonomy",
        "description": "Get the complete taxonomy that contains the specified node",
        "operationId": "get_taxonomy_v1_entities_taxonomies__taxonomy__get",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name or id of the taxonomy to find",
              "title": "Taxonomy"
            },
            "description": "The name or id of the taxonomy to find"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomies",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Delete Taxonomy",
        "description": "Delete an existing taxonomy and remove all associated node classifications from features.\n\n    This operation:\n    - Deletes the taxonomy and all its nodes\n    - Removes any node classifications associated with this taxonomy from all features\n    - This action cannot be undone\n    \n\n**Requirements:**\n- Required permissions: write",
        "operationId": "delete_taxonomy_v1_entities_taxonomies__taxonomy__delete",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the taxonomy to delete",
              "title": "Taxonomy"
            },
            "description": "The ID or name of the taxonomy to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomies",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Update Taxonomy",
        "description": "Update an existing taxonomy's metadata\n\n**Requirements:**\n- Required permissions: write",
        "operationId": "update_taxonomy_v1_entities_taxonomies__taxonomy__patch",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the taxonomy to update",
              "title": "Taxonomy"
            },
            "description": "The ID or name of the taxonomy to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxonomyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomies",
        "x-speakeasy-name-override": "update"
      }
    },
    "/v1/entities/taxonomies/nodes/{node}": {
      "get": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Get Taxonomy Node",
        "description": "Get the complete taxonomy that contains the specified node",
        "operationId": "get_taxonomy_node_v1_entities_taxonomies_nodes__node__get",
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the node to find the taxonomy for",
              "title": "Node"
            },
            "description": "The ID or name of the node to find the taxonomy for"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "getNode"
      },
      "patch": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Update Node",
        "description": "Update an existing taxonomy node\n\n**Requirements:**\n- Required permissions: write",
        "operationId": "update_node_v1_entities_taxonomies_nodes__node__patch",
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the node to update",
              "title": "Node"
            },
            "description": "The ID or name of the node to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "updateNode"
      }
    },
    "/v1/entities/taxonomies/{taxonomy}/classify": {
      "post": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Classify Features against Taxonomy",
        "description": "Starts an asynchronous task to classify features within collections for a given taxonomy.",
        "operationId": "classify_features_v1_entities_taxonomies__taxonomy__classify_post",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name or id of the taxonomy to use for discovery",
              "title": "Taxonomy"
            },
            "description": "The name or id of the taxonomy to use for discovery"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "classifyFeatures"
      }
    },
    "/v1/entities/taxonomies/{taxonomy}/classifications": {
      "post": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "List Taxonomy Classifications",
        "description": "Retrieves a paginated list of classification entries with optional filtering.",
        "operationId": "list_classifications_v1_entities_taxonomies__taxonomy__classifications_post",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the taxonomy",
              "title": "Taxonomy"
            },
            "description": "The ID or name of the taxonomy"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListClassificationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListClassificationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "listClassifications"
      }
    },
    "/v1/entities/taxonomies/{taxonomy}/classifications/{classification_id}": {
      "delete": {
        "tags": [
          "Taxonomy Entities"
        ],
        "summary": "Delete Classifications",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "delete_classifications_v1_entities_taxonomies__taxonomy__classifications__classification_id__delete",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id or name of the taxonomy",
              "title": "Taxonomy"
            },
            "description": "The id or name of the taxonomy"
          },
          {
            "name": "classification_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the classification to delete",
              "title": "Classification Id"
            },
            "description": "The id of the classification to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-group": "taxonomyEntities",
        "x-speakeasy-name-override": "deleteClassification"
      }
    },
    "/v1/assets/{asset_id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get Asset",
        "description": "Get basic asset details",
        "operationId": "get_asset_v1_assets__asset_id__get",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the asset",
              "title": "Asset Id"
            },
            "description": "Unique identifier of the asset",
            "example": "ast_123"
          },
          {
            "name": "return_url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to generate and return presigned S3 URLs for the asset and preview. Set to false to improve performance when URLs aren't needed",
              "default": true,
              "title": "Return Url"
            },
            "description": "Whether to generate and return presigned S3 URLs for the asset and preview. Set to false to improve performance when URLs aren't needed",
            "example": true
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete Asset",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "delete_asset_v1_assets__asset_id__delete",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Asset Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Full Asset Update",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "full_asset_update_v1_assets__asset_id__put",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Asset Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update"
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Partial Asset Update",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "partial_asset_update_v1_assets__asset_id__patch",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Asset Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "partialUpdate"
      }
    },
    "/v1/assets/{asset_id}/features": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get Asset With Features",
        "description": "Get asset details including all related features",
        "operationId": "get_asset_with_features_v1_assets__asset_id__features_get",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the asset",
              "title": "Asset Id"
            },
            "description": "Unique identifier of the asset",
            "example": "asset_123456789"
          },
          {
            "name": "return_url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to generate and return presigned S3 URLs for the asset and preview. Set to false to improve performance when URLs aren't needed",
              "default": false,
              "title": "Return Url"
            },
            "description": "Whether to generate and return presigned S3 URLs for the asset and preview. Set to false to improve performance when URLs aren't needed",
            "example": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupedAssetData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "getWithFeatures"
      }
    },
    "/v1/assets": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "List Assets",
        "operationId": "list_assets_v1_assets_post",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAssetsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAssetsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list"
      }
    },
    "/v1/assets/search": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Search Assets",
        "operationId": "search_assets_v1_assets_search_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAssetsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAssetsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "search"
      }
    },
    "/v1/collections": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "List Collections",
        "operationId": "list_collections_v1_collections_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create Collection",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "create_collection_v1_collections_post",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "create"
      }
    },
    "/v1/collections/{collection}": {
      "delete": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete Collection",
        "description": "Delete a collection using either its name or ID",
        "operationId": "delete_collection_v1_collections__collection__delete",
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the collection name or collection ID",
              "examples": [
                "my_collection",
                "col_1234567890"
              ],
              "title": "Collection"
            },
            "description": "Either the collection name or collection ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "put": {
        "tags": [
          "Collections"
        ],
        "summary": "Update Collection",
        "description": "Update a collection using either its name or ID",
        "operationId": "update_collection_v1_collections__collection__put",
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the collection name or collection ID",
              "examples": [
                "my_collection",
                "col_1234567890"
              ],
              "title": "Collection"
            },
            "description": "Either the collection name or collection ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "update"
      },
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get Collection",
        "description": "Get a collection using either its name or ID",
        "operationId": "get_collection_v1_collections__collection__get",
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Either the collection name or collection ID",
              "examples": [
                "my_collection",
                "col_1234567890"
              ],
              "title": "Collection"
            },
            "description": "Either the collection name or collection ID"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/tasks/{task_id}": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Kill Task",
        "description": "**Requirements:**\n- Required permissions: write",
        "operationId": "kill_task_v1_tasks__task_id__delete",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "delete"
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get Task Information",
        "description": "Retrieve a task by its ID.\n    \n    A task may have an expiration time, after which it will still be returned but marked as expired.\n    This allows tracking of historical tasks while indicating their current validity state.",
        "operationId": "get_task_v1_tasks__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "get"
      }
    },
    "/v1/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List Active Tasks",
        "description": "Retrieve all tasks that are not in a complete state (DONE, FAILED, SKIPPED, or CANCELLED)",
        "operationId": "list_active_tasks_v1_tasks_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'",
              "title": "Authorization"
            },
            "description": "Bearer token authentication using your API key. Format: 'Bearer your_api_key'. To get an API key, create an account at mixpeek.com/start and generate a key in your account settings. Example: 'Bearer sk_1234567890abcdef'"
          },
          {
            "name": "X-Namespace",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
              "title": "X-Namespace"
            },
            "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "listActive"
      }
    }
  },
  "components": {
    "schemas": {
      "APIKey": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "title": "APIKey"
      },
      "APIKeyUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "permissions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Permission"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Permissions"
          }
        },
        "type": "object",
        "title": "APIKeyUpdate"
      },
      "ActionUsage": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "credits": {
            "type": "integer",
            "title": "Credits"
          }
        },
        "type": "object",
        "required": [
          "action",
          "credits"
        ],
        "title": "ActionUsage"
      },
      "AssetFeatures": {
        "properties": {
          "video": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FeatureResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Video"
          },
          "image": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FeatureResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image"
          },
          "text": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FeatureResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text"
          },
          "audio": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FeatureResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Audio"
          }
        },
        "type": "object",
        "title": "AssetFeatures"
      },
      "AssetResponse": {
        "properties": {
          "asset_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Id",
            "description": "The unique identifier for the asset",
            "example": "ast_123"
          },
          "collection_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Id",
            "description": "The ID of the collection the asset belongs to",
            "example": "col_123"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "The current status of the asset processing",
            "example": "processing"
          },
          "file_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Data",
            "description": "File data associated with the asset",
            "example": {
              "file_size_bytes": 1000000,
              "file_type": "image/jpeg"
            }
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata associated with the asset",
            "example": {
              "description": "A new description",
              "title": "New Title"
            }
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "The error message if the asset processing failed"
          },
          "modality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modality",
            "description": "The type of media",
            "example": "image"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id",
            "description": "The task ID",
            "example": "task123"
          },
          "file_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Hash",
            "description": "The unique hash of the ",
            "example": "hash123"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "MongoDB datetime format"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the asset was last updated",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "MongoDB datetime format"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The timestamp when the asset was created",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score",
            "description": "The relevance score of the asset",
            "example": 0.5
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "The presigned URL for accessing the asset"
          },
          "preview_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preview Url",
            "description": "The presigned URL for accessing the asset preview"
          },
          "duplicate_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duplicate Of",
            "description": "The asset_id of the asset that this asset is a duplicate of"
          }
        },
        "type": "object",
        "title": "AssetResponse"
      },
      "AssetUpdate": {
        "properties": {
          "asset_id": {
            "type": "string",
            "title": "Asset Id",
            "description": "Unique identifier for the asset to be updated"
          },
          "mode": {
            "type": "string",
            "enum": [
              "replace",
              "append"
            ],
            "title": "Mode",
            "description": "Update mode: 'replace' or 'append'"
          }
        },
        "type": "object",
        "required": [
          "asset_id",
          "mode"
        ],
        "title": "AssetUpdate"
      },
      "AssignmentConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether to assign the taxonomy to the feature",
            "default": false
          },
          "mode": {
            "$ref": "#/components/schemas/AssignmentMode",
            "description": "How to assign classifications: either all above threshold (THRESHOLD) or only the closest match (NEAREST)",
            "default": "threshold"
          },
          "append": {
            "type": "boolean",
            "title": "Append",
            "description": "Whether to append the classification to the feature, if false, replaces any existing classification",
            "default": false
          },
          "confidence_threshold": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence Threshold",
            "description": "Minimum confidence score required for classification (only used in threshold mode)",
            "default": 0.8
          }
        },
        "type": "object",
        "title": "AssignmentConfig",
        "description": "Configuration for how classifications should be assigned to features"
      },
      "AssignmentMode": {
        "type": "string",
        "enum": [
          "threshold",
          "nearest"
        ],
        "title": "AssignmentMode",
        "description": "Mode for how classifications should be assigned"
      },
      "AvailableModels": {
        "type": "string",
        "enum": [
          "image",
          "multimodal",
          "text",
          "video",
          "keyword",
          "naver-splade-v3",
          "vertex-multimodal",
          "openai-clip-vit-base-patch32",
          "baai-bge-m3"
        ],
        "title": "AvailableModels"
      },
      "AvailableModelsResponse": {
        "properties": {
          "embedding_models": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ModelDetails"
            },
            "type": "object",
            "title": "Embedding Models",
            "description": "Dictionary mapping model names to their detailed specifications",
            "example": {
              "multimodal": {
                "size": 1408,
                "supported_modalities": [
                  "text",
                  "image",
                  "video"
                ],
                "vector_type": "dense"
              },
              "text": {
                "size": 1024,
                "supported_modalities": [
                  "text"
                ],
                "vector_type": "dense"
              }
            }
          },
          "payload_indexes": {
            "items": {
              "$ref": "#/components/schemas/PayloadIndexType"
            },
            "type": "array",
            "title": "Payload Indexes",
            "description": "List of available payload index types that can be used for filtering",
            "example": [
              {
                "type": "keyword"
              },
              {
                "type": "integer"
              },
              {
                "type": "text"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "embedding_models",
          "payload_indexes"
        ],
        "title": "AvailableModelsResponse",
        "description": "Response schema for available models endpoint"
      },
      "BoolIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "bool"
          }
        },
        "type": "object",
        "title": "BoolIndexParams",
        "description": "Configuration for boolean index"
      },
      "ClassificationMatch": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "ID of the matched taxonomy node"
          },
          "node": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaxonomyNode"
              },
              {
                "type": "null"
              }
            ],
            "description": "Full node object if requested"
          },
          "score": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Score",
            "description": "Confidence score of the match"
          },
          "depth": {
            "type": "integer",
            "title": "Depth",
            "description": "Depth of the node in the taxonomy",
            "example": 1
          },
          "order": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Order",
            "description": "Order of the node in the taxonomy",
            "example": [
              1,
              2,
              3
            ]
          }
        },
        "type": "object",
        "required": [
          "node_id",
          "score",
          "depth",
          "order"
        ],
        "title": "ClassificationMatch",
        "description": "Individual node match with score"
      },
      "ClassificationWithFeature": {
        "properties": {
          "feature_id": {
            "type": "string",
            "title": "Feature Id",
            "description": "ID of the classified feature"
          },
          "feature": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeatureResponse"
              },
              {
                "type": "null"
              }
            ],
            "description": "Full feature object if requested"
          },
          "classification_id": {
            "type": "string",
            "title": "Classification Id",
            "description": "ID of the classification run"
          },
          "taxonomy_id": {
            "type": "string",
            "title": "Taxonomy Id",
            "description": "ID of the taxonomy used"
          },
          "matches": {
            "items": {
              "$ref": "#/components/schemas/ClassificationMatch"
            },
            "type": "array",
            "title": "Matches",
            "description": "List of node matches with scores"
          }
        },
        "type": "object",
        "required": [
          "feature_id",
          "classification_id",
          "taxonomy_id",
          "matches"
        ],
        "title": "ClassificationWithFeature",
        "description": "Classification entry with optional full feature and node data"
      },
      "CollectionModel": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name for the collection"
          },
          "collection_id": {
            "type": "string",
            "title": "Collection Id",
            "description": "Unique identifier for the collection"
          },
          "namespace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Namespace Id",
            "description": "Namespace for the collection"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Optional metadata for the collection"
          }
        },
        "type": "object",
        "required": [
          "collection_name"
        ],
        "title": "CollectionModel"
      },
      "CollectionResult": {
        "properties": {
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "size_bytes": {
            "type": "integer",
            "title": "Size Bytes"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "MongoDB datetime format"
          },
          "collection_id": {
            "type": "string",
            "title": "Collection Id"
          },
          "preview_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preview Url"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          }
        },
        "type": "object",
        "required": [
          "count",
          "size_bytes",
          "last_updated",
          "collection_id"
        ],
        "title": "CollectionResult"
      },
      "CreateCollectionRequest": {
        "properties": {
          "collection_name": {
            "type": "string",
            "title": "Collection Name",
            "description": "Name for the collection"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Optional metadata for the collection"
          }
        },
        "type": "object",
        "required": [
          "collection_name"
        ],
        "title": "CreateCollectionRequest"
      },
      "CreateNamespaceRequest": {
        "properties": {
          "namespace_name": {
            "type": "string",
            "title": "Namespace Name",
            "description": "Name of the namespace to create",
            "example": "spotify_playlists_dev"
          },
          "embedding_models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Embedding Models",
            "description": "List of vector indexes to be used within this namespace. Must be one of: 'image', 'openai-clip-vit-base-patch32', 'multimodal', 'vertex-multimodal', 'text', 'baai-bge-m3', 'keyword', 'naver-splade-v3'",
            "example": [
              "image",
              "multimodal",
              "text",
              "keyword"
            ]
          },
          "payload_indexes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PayloadIndexConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload Indexes",
            "description": "List of payload index configurations",
            "example": [
              {
                "field_name": "metadata.title",
                "field_schema": {
                  "lowercase": true,
                  "max_token_len": 15,
                  "min_token_len": 2,
                  "tokenizer": "word",
                  "type": "text"
                },
                "type": "text"
              },
              {
                "field_name": "metadata.description",
                "field_schema": {
                  "is_tenant": false,
                  "type": "keyword"
                },
                "type": "keyword"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "namespace_name",
          "embedding_models"
        ],
        "title": "CreateNamespaceRequest",
        "description": "Request schema for creating a new namespace"
      },
      "DateUsage": {
        "properties": {
          "date": {
            "type": "string",
            "title": "Date"
          },
          "credits": {
            "type": "integer",
            "title": "Credits"
          },
          "actions": {
            "items": {
              "$ref": "#/components/schemas/ActionUsage"
            },
            "type": "array",
            "title": "Actions"
          }
        },
        "type": "object",
        "required": [
          "date",
          "credits",
          "actions"
        ],
        "title": "DateUsage"
      },
      "DatetimeIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "datetime"
          }
        },
        "type": "object",
        "title": "DatetimeIndexParams",
        "description": "Configuration for datetime index"
      },
      "DenseEmbedding": {
        "properties": {
          "vector": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Vector",
            "description": "Dense vector representation"
          }
        },
        "type": "object",
        "required": [
          "vector"
        ],
        "title": "DenseEmbedding"
      },
      "DiscoverRequest": {
        "properties": {
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections",
            "description": "List of collection names or ids to search for features"
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Filters to apply to the discovery task"
          },
          "assignment": {
            "$ref": "#/components/schemas/AssignmentConfig",
            "description": "Configuration for feature assignment behavior"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "description": "Number of feature samples to process, if None, all features that match the filters are processed",
            "default": 1000
          }
        },
        "type": "object",
        "required": [
          "collections"
        ],
        "title": "DiscoverRequest"
      },
      "EmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text",
              "url",
              "base64"
            ],
            "title": "Type",
            "description": "Type of the input",
            "example": "url"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value of the input",
            "example": "https://example.com/image.jpg"
          },
          "embedding_model": {
            "$ref": "#/components/schemas/AvailableModels",
            "description": "Name of the embedding model to use",
            "example": "image"
          }
        },
        "type": "object",
        "required": [
          "type",
          "value",
          "embedding_model"
        ],
        "title": "EmbeddingConfig"
      },
      "EmbeddingRequest": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/InputType",
            "description": "Type of input to embed",
            "example": "url"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "The input content to embed. Could be a URL, text content, file path, or base64 encoded string",
            "example": "https://example.com/image.jpg"
          },
          "embedding_model": {
            "$ref": "#/components/schemas/VectorModel",
            "description": "Name of the embedding model to use for embedding. Multiple requests with the same model will be averaged.",
            "example": "image_vector"
          }
        },
        "type": "object",
        "required": [
          "type",
          "embedding_model"
        ],
        "title": "EmbeddingRequest",
        "description": "\n            Request model for embedding generation.\n            \n            When multiple EmbeddingRequests use the same embedding_model:\n            - All inputs will be embedded in the same vector space\n            - The final embedding will be the average of all individual embeddings\n            - Original values will be stored with a ' | ' separator\n            \n            Example:\n                Two requests with same model \"clip\":\n                1. type: \"text\", value: \"a dog\", embedding_model: \"clip\"\n                2. type: \"url\", value: \"https://example.com/image.jpg\", embedding_model: \"clip\"\n                \n                Result:\n                - vectors[\"clip\"] = average of both embeddings\n                - embedding_configs[\"clip\"] = \"a dog | https://example.com/image.jpg\"\n            ",
        "examples": [
          {
            "embedding_model": "clip",
            "type": "text",
            "value": "a dog"
          }
        ]
      },
      "EmbeddingResponse": {
        "properties": {
          "embedding": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DenseEmbedding"
              },
              {
                "$ref": "#/components/schemas/SparseEmbedding"
              }
            ],
            "title": "Embedding",
            "description": "The embedding of the processed data, either dense or sparse format"
          },
          "elapsed_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elapsed Time",
            "description": "The time taken to process the data."
          }
        },
        "type": "object",
        "required": [
          "embedding"
        ],
        "title": "EmbeddingResponse"
      },
      "EntitySettings": {
        "properties": {
          "taxonomy_extraction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaxonomyExtractionConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for extracting entities using taxonomies"
          }
        },
        "type": "object",
        "title": "EntitySettings"
      },
      "ErrorDetail": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": [
          "message",
          "type"
        ],
        "title": "ErrorDetail"
      },
      "ErrorResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": false
          },
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "error": {
            "$ref": "#/components/schemas/ErrorDetail"
          }
        },
        "type": "object",
        "required": [
          "status",
          "error"
        ],
        "title": "ErrorResponse"
      },
      "FeatureExtractionEmbeddingRequest": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/InputType",
            "description": "Type of input to embed",
            "example": "url"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "The input content to embed. Could be a URL, text content, file path, or base64 encoded string",
            "example": "https://example.com/image.jpg"
          },
          "embedding_model": {
            "$ref": "#/components/schemas/VectorModel",
            "description": "Name of the vector index to use for embedding",
            "example": "image_vector"
          }
        },
        "type": "object",
        "required": [
          "type",
          "embedding_model"
        ],
        "title": "FeatureExtractionEmbeddingRequest"
      },
      "FeatureOptions": {
        "properties": {
          "return_payload": {
            "type": "boolean",
            "title": "Return Payload",
            "description": "Whether to include the full feature payload in the response",
            "default": false
          },
          "return_url": {
            "type": "boolean",
            "title": "Return Url",
            "description": "Whether to include feature URLs in the response",
            "default": false
          }
        },
        "type": "object",
        "title": "FeatureOptions",
        "description": "Controls what feature data to include in classification responses"
      },
      "FeatureResponse": {
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "The presigned URL for accessing the asset"
          },
          "preview_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preview Url",
            "description": "The presigned URL for accessing the asset preview"
          },
          "duplicate_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duplicate Of",
            "description": "The asset_id of the asset that this asset is a duplicate of"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "FeatureResponse"
      },
      "FeatureUpdateRequest": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "metadata"
        ],
        "title": "FeatureUpdateRequest"
      },
      "FilterCondition": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Field name to filter on"
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "Value to compare against"
          },
          "operator": {
            "type": "string",
            "enum": [
              "eq",
              "ne",
              "gt",
              "lt",
              "gte",
              "lte",
              "in",
              "nin",
              "is_null",
              "text",
              "exists"
            ],
            "title": "Operator",
            "description": "Comparison operator",
            "default": "eq"
          }
        },
        "type": "object",
        "required": [
          "key"
        ],
        "title": "FilterCondition"
      },
      "FloatIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "float"
          }
        },
        "type": "object",
        "title": "FloatIndexParams",
        "description": "Configuration for float index"
      },
      "GenericSuccessResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "GenericSuccessResponse"
      },
      "GeoIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "geo"
          }
        },
        "type": "object",
        "title": "GeoIndexParams",
        "description": "Configuration for geo index"
      },
      "GroupByOptions": {
        "properties": {
          "field": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field",
            "description": "\n        Field to group by\n        \n        Note: We currently do not support ad-hoc grouping.\n        This means the field must be indexed separately. \n        Please contact us to add additional fields for grouping.\n        ",
            "default": "asset_id",
            "example": "asset_id"
          },
          "max_features": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Features",
            "description": "Maximum number of features to group",
            "default": 10,
            "example": 10
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sort options for ordering the inside of the groups"
          }
        },
        "type": "object",
        "title": "GroupByOptions"
      },
      "GroupByOptionsAsset": {
        "properties": {
          "field": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field",
            "description": "\n        Field to group by\n        \n        Note: We currently do not support ad-hoc grouping.\n        This means the field must be indexed separately. \n        Please contact us to add additional fields for grouping.\n        ",
            "default": "asset_id",
            "example": "asset_id"
          },
          "max_assets": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Assets",
            "description": "Maximum number of assets to group",
            "default": 10,
            "example": 10
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sort options for ordering the inside of the groups"
          }
        },
        "type": "object",
        "title": "GroupByOptionsAsset"
      },
      "GroupedAssetData": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/AssetResponse"
          },
          "features": {
            "$ref": "#/components/schemas/AssetFeatures"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "features"
        ],
        "title": "GroupedAssetData"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthCheckResponse"
      },
      "ImageDescribeSettings": {
        "properties": {
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Prompt for image description",
            "default": "\n                Describe this image in as much detail as possible.\n                Make sure to include objects, colors, text, composition, and any other relevant information.\n                The purpose of this is so I can search through the text to find this image later.\n                                  \n                Don't include any pretext like \"this is an image of\" or \"this image shows\".\n    "
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable image description",
            "default": true
          },
          "max_length": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Length",
            "description": "Maximum length of the description",
            "default": 1000
          },
          "json_output": {
            "type": "object",
            "title": "Json Output",
            "description": "JSON format for the response",
            "default": {}
          },
          "embedding_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the vector model to use for embedding the text output. If embedding_model is duplicated, the vector will be overwritten.",
            "example": "text_vector"
          }
        },
        "type": "object",
        "title": "ImageDescribeSettings"
      },
      "ImageDetectSettings": {
        "properties": {
          "logos": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogoDetectSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for logo detection",
            "default": {
              "enabled": true,
              "confidence_threshold": 0.7
            }
          }
        },
        "type": "object",
        "title": "ImageDetectSettings"
      },
      "ImageReadSettings": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable image reading",
            "default": true
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Prompt for reading on-screen text",
            "default": "\n    Read all visible text from this image.\n    Only include text that appears in the image, ignoring any other visual elements or context.\n    Provide the text exactly as it appears, maintaining its original formatting and structure.\n    Do not describe or interpret the content, just read the text verbatim.\n    Ignore any special characters or formatting symbols like '\n', '\t', or similar that might appear in the text.\n    Do not repeat text that appears multiple times; include it only once.\n    ___\n    IMPORTANT: \n    - If there is no text, or if the text is illegible, return an empty string.\n    - Avoid listing repeated elements multiple times.\n    - Provide a concise, non-redundant representation of the text content.\n    "
          },
          "json_output": {
            "type": "object",
            "title": "Json Output",
            "description": "JSON format for the response",
            "default": {}
          },
          "embedding_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the vector model to use for embedding the text output. If embedding_model is duplicated, the vector will be overwritten.",
            "example": "text_vector"
          }
        },
        "type": "object",
        "title": "ImageReadSettings"
      },
      "ImageSettings": {
        "properties": {
          "read": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageReadSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for reading and analyzing image content.",
            "example": {
              "enabled": true
            }
          },
          "embed": {
            "items": {
              "$ref": "#/components/schemas/EmbeddingRequest"
            },
            "type": "array",
            "title": "Embed",
            "description": "List of embedding settings for generating multiple embeddings. If url is provided, value must be None. \n Default: [{type: 'url', embedding_model: 'multimodal'}] if none provided.",
            "example": [
              {
                "embedding_model": "multimodal",
                "type": "url"
              },
              {
                "embedding_model": "image",
                "type": "url"
              }
            ]
          },
          "describe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageDescribeSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for generating image descriptions.",
            "example": {
              "enabled": true,
              "max_length": 1000
            }
          },
          "detect": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageDetectSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for object detection in images.",
            "example": {
              "faces": {
                "confidence_threshold": 0.8,
                "enabled": true
              }
            }
          },
          "json_output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JSONImageOutputSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for structured JSON output of image analysis.",
            "example": {
              "response_shape": {
                "colors": [
                  "str"
                ],
                "objects": [
                  "str"
                ]
              }
            }
          },
          "entities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntitySettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for extracting entities from image content"
          }
        },
        "type": "object",
        "title": "ImageSettings"
      },
      "InputType": {
        "type": "string",
        "enum": [
          "url",
          "text",
          "file",
          "base64"
        ],
        "title": "InputType"
      },
      "IntegerIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "integer"
          },
          "lookup": {
            "type": "boolean",
            "title": "Lookup",
            "default": true
          },
          "range": {
            "type": "boolean",
            "title": "Range",
            "default": true
          }
        },
        "type": "object",
        "title": "IntegerIndexParams",
        "description": "Configuration for integer index"
      },
      "JSONImageOutputSettings": {
        "properties": {
          "response_shape": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Shape",
            "default": false
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "default": "Interpret the provided image and structure it into the supplied JSON format."
          }
        },
        "type": "object",
        "title": "JSONImageOutputSettings"
      },
      "JSONTextOutputSettings": {
        "properties": {
          "response_shape": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Shape",
            "default": false
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "default": "Interpret the provided text and structure it into the supplied JSON format."
          }
        },
        "type": "object",
        "title": "JSONTextOutputSettings"
      },
      "JSONVideoOutputSettings": {
        "properties": {
          "response_shape": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Shape",
            "default": false
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "default": "Interpret the provided video and structure it into the supplied JSON format."
          }
        },
        "type": "object",
        "title": "JSONVideoOutputSettings"
      },
      "KeywordIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "keyword"
          },
          "is_tenant": {
            "type": "boolean",
            "title": "Is Tenant",
            "default": false
          }
        },
        "type": "object",
        "title": "KeywordIndexParams",
        "description": "Configuration for keyword index"
      },
      "ListAssetsRequest": {
        "properties": {
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections",
            "description": "List of Collection IDs or Names to search within, required",
            "example": [
              "col_123",
              "my_collection"
            ]
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Used for filtering across all indexes"
          },
          "group_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GroupByOptionsAsset"
              },
              {
                "type": "null"
              }
            ],
            "description": "Grouping options for search results"
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "List of fields to sort by, with direction (asc or desc). Supports dot notation for nested fields."
          },
          "select": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Select",
            "description": "List of fields to return in results, supports dot notation. If None, all fields are returned.",
            "example": [
              "title",
              "content",
              "metadata.author",
              "metadata.publication_date"
            ]
          },
          "return_url": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Return Url",
            "description": "Return the presigned URL for the asset and preview asset, this will introduce additional latency",
            "default": false,
            "example": true
          }
        },
        "type": "object",
        "required": [
          "collections"
        ],
        "title": "ListAssetsRequest"
      },
      "ListAssetsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/AssetResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "pagination": {
            "$ref": "#/components/schemas/db__model__PaginationResponse"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListAssetsResponse"
      },
      "ListClassificationsRequest": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Complex nested query filters for classifications",
            "example": {
              "AND": [
                {
                  "key": "score",
                  "operator": "gte",
                  "value": 0.8
                },
                {
                  "key": "node_name",
                  "operator": "contains",
                  "value": "electronics"
                }
              ]
            }
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sort options for ordering classifications",
            "example": {
              "direction": "desc",
              "field": "created_at"
            }
          },
          "feature_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeatureOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Controls what feature data to include in the response. Note: Including additional data increases response latency.",
            "default": {
              "return_payload": false,
              "return_url": false
            },
            "example": {
              "return_payload": true,
              "return_url": true
            }
          },
          "node_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NodeOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Controls what node data to include in the response. Note: Including additional data increases response latency.",
            "default": {
              "return_payload": false
            },
            "example": {
              "return_payload": true
            }
          }
        },
        "type": "object",
        "title": "ListClassificationsRequest",
        "description": "Request model for listing classifications with filters"
      },
      "ListClassificationsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ClassificationWithFeature"
            },
            "type": "array",
            "title": "Results",
            "description": "List of classification entries with optional enriched data"
          },
          "pagination": {
            "$ref": "#/components/schemas/db__model__PaginationResponse",
            "description": "Pagination information"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListClassificationsResponse",
        "description": "Response for the list classifications endpoint"
      },
      "ListCollectionsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/CollectionResult"
            },
            "type": "array",
            "title": "Results"
          },
          "pagination": {
            "$ref": "#/components/schemas/db__model__PaginationResponse"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListCollectionsResponse"
      },
      "ListFeaturesRequest": {
        "properties": {
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections",
            "description": "Collection identifiers - can be either collection IDs or collection names",
            "example": [
              "collection_123",
              "my_collection_name"
            ]
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Complex nested query filters"
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "\n        List of fields to sort by, with direction (asc or desc).\n        NOTE: fields will require a specialty index to use this, consult with the team.\n        "
          },
          "select": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Select",
            "description": "List of fields to return in results, supports dot notation. Everything else is excluded.",
            "example": [
              "metadata.tags"
            ]
          },
          "return_urls": {
            "type": "boolean",
            "title": "Return Urls",
            "description": "When true, generates presigned URLs for assets",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "collections"
        ],
        "title": "ListFeaturesRequest"
      },
      "ListFeaturesResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/FeatureResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "pagination": {
            "$ref": "#/components/schemas/features__model__PaginationResponse"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListFeaturesResponse"
      },
      "ListTasksResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/TaskResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "pagination": {
            "$ref": "#/components/schemas/db__model__PaginationResponse"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListTasksResponse"
      },
      "ListTaxonomiesResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/TaxonomyModel"
            },
            "type": "array",
            "title": "Results",
            "description": "List of fully populated taxonomies with nodes"
          },
          "pagination": {
            "$ref": "#/components/schemas/db__model__PaginationResponse",
            "description": "Pagination information"
          }
        },
        "type": "object",
        "required": [
          "results",
          "pagination"
        ],
        "title": "ListTaxonomiesResponse"
      },
      "LogicalOperator": {
        "properties": {
          "case_sensitive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Case Sensitive",
            "description": "Whether to perform case-sensitive matching",
            "default": false,
            "example": true
          },
          "AND": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "And",
            "description": "Logical AND operation",
            "example": [
              {
                "key": "name",
                "operator": "eq",
                "value": "John"
              },
              {
                "key": "age",
                "operator": "gte",
                "value": 30
              }
            ]
          },
          "OR": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Or",
            "description": "Logical OR operation",
            "example": [
              {
                "key": "status",
                "operator": "eq",
                "value": "active"
              },
              {
                "key": "role",
                "operator": "eq",
                "value": "admin"
              }
            ]
          },
          "NOR": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LogicalOperator"
                    },
                    {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nor",
            "description": "Logical NOR operation",
            "example": [
              {
                "key": "department",
                "operator": "eq",
                "value": "HR"
              },
              {
                "key": "location",
                "operator": "eq",
                "value": "remote"
              }
            ]
          }
        },
        "type": "object",
        "title": "LogicalOperator"
      },
      "LogoDetectSettings": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable logo detection",
            "default": true
          },
          "confidence_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence Threshold",
            "description": "Minimum confidence threshold for detected logos",
            "default": 0.7
          }
        },
        "type": "object",
        "title": "LogoDetectSettings"
      },
      "Modality": {
        "type": "string",
        "enum": [
          "video",
          "audio",
          "text",
          "image",
          "keyword",
          "multimodal"
        ],
        "title": "Modality"
      },
      "ModelDetails": {
        "properties": {
          "supported_modalities": {
            "items": {
              "$ref": "#/components/schemas/Modality"
            },
            "type": "array",
            "title": "Supported Modalities",
            "description": "List of modalities that this model supports",
            "example": [
              "text",
              "image"
            ]
          },
          "vector_type": {
            "$ref": "#/components/schemas/VectorType",
            "description": "Type of vector output (sparse or dense)",
            "example": "dense"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size",
            "description": "Dimensionality of the output vector (if applicable)",
            "example": 512
          }
        },
        "type": "object",
        "required": [
          "supported_modalities",
          "vector_type"
        ],
        "title": "ModelDetails",
        "description": "Details about a model in the registry"
      },
      "NamespaceResponse": {
        "properties": {
          "namespace_id": {
            "type": "string",
            "title": "Namespace Id"
          },
          "namespace_name": {
            "type": "string",
            "title": "Namespace Name"
          },
          "embedding_models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Embedding Models"
          },
          "payload_indexes": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload Indexes"
          }
        },
        "type": "object",
        "required": [
          "namespace_id",
          "namespace_name",
          "embedding_models",
          "payload_indexes"
        ],
        "title": "NamespaceResponse"
      },
      "NodeOptions": {
        "properties": {
          "return_payload": {
            "type": "boolean",
            "title": "Return Payload",
            "description": "Whether to include the full node object in the response",
            "default": false
          }
        },
        "type": "object",
        "title": "NodeOptions"
      },
      "NodeUpdate": {
        "properties": {
          "node_name": {
            "type": "string",
            "title": "Node Name",
            "description": "Name of the taxonomy node (must be lowercase without spaces)",
            "example": "electronics_accessories"
          },
          "node_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Description",
            "description": "Optional description of what this node represents",
            "example": "Electronics accessories and peripherals category"
          }
        },
        "type": "object",
        "required": [
          "node_name"
        ],
        "title": "NodeUpdate"
      },
      "OrganizationModel": {
        "properties": {
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "internal_id": {
            "type": "string",
            "title": "Internal Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "account_type": {
            "type": "string",
            "title": "Account Type",
            "default": "free"
          },
          "credit_count": {
            "type": "integer",
            "title": "Credit Count",
            "default": 1000
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserModel-Output"
            },
            "type": "array",
            "title": "Users"
          }
        },
        "type": "object",
        "required": [
          "organization_name"
        ],
        "title": "OrganizationModel"
      },
      "PayloadIndexConfig": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "type": {
            "$ref": "#/components/schemas/PayloadSchemaType"
          },
          "field_schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextIndexParams"
              },
              {
                "$ref": "#/components/schemas/IntegerIndexParams"
              },
              {
                "$ref": "#/components/schemas/KeywordIndexParams"
              },
              {
                "$ref": "#/components/schemas/FloatIndexParams"
              },
              {
                "$ref": "#/components/schemas/GeoIndexParams"
              },
              {
                "$ref": "#/components/schemas/DatetimeIndexParams"
              },
              {
                "$ref": "#/components/schemas/UuidIndexParams"
              },
              {
                "$ref": "#/components/schemas/BoolIndexParams"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Schema"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "type"
        ],
        "title": "PayloadIndexConfig",
        "description": "Configuration for a payload index"
      },
      "PayloadIndexType": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PayloadIndexType",
        "description": "Simple schema for payload index type"
      },
      "PayloadSchemaType": {
        "type": "string",
        "enum": [
          "keyword",
          "integer",
          "float",
          "bool",
          "geo",
          "datetime",
          "text",
          "uuid"
        ],
        "title": "PayloadSchemaType"
      },
      "Permission": {
        "type": "string",
        "enum": [
          "read",
          "write",
          "view",
          "create",
          "update",
          "delete",
          "super",
          "admin",
          "manage_users",
          "manage_billing",
          "manage_settings",
          "read_public",
          "read_private",
          "write_public",
          "write_private"
        ],
        "title": "Permission"
      },
      "ProcessImageURLInput": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL of the asset to be processed. Must be a valid HTTP or HTTPS URL.",
            "example": "https://example.com/sample-video.mp4"
          },
          "collection": {
            "type": "string",
            "title": "Collection",
            "description": "Unique identifier for the collection where the processed asset will be stored, can be the collection name or collection ID. If neither exist, the collection will be created.",
            "example": "col_1234567890"
          },
          "asset_update": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssetUpdate"
              },
              {
                "type": "null"
              }
            ],
            "description": "Controls how processing results are stored - either creating a new asset or updating an existing one."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata associated with the asset. Can include any key-value pairs relevant to the asset.",
            "default": {},
            "example": {
              "author": "John Doe",
              "category": "Research Paper",
              "tags": [
                "AI",
                "Machine Learning"
              ]
            }
          },
          "skip_duplicate": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip Duplicate",
            "description": "Makes feature extraction idempotent. When True and a duplicate file hash is found, copies features from the existing asset instead of reprocessing. This allows the same file to be used multiple times with different metadata while avoiding redundant processing.",
            "default": true
          },
          "feature_extractors": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for image processing. Only applicable if the URL points to an image file."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "url",
          "collection"
        ],
        "title": "ProcessImageURLInput"
      },
      "ProcessTextInput": {
        "properties": {
          "collection": {
            "type": "string",
            "title": "Collection",
            "description": "Unique identifier for the collection where the processed asset will be stored, can be the collection name or collection ID. If neither exist, the collection will be created.",
            "example": "col_1234567890"
          },
          "asset_update": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssetUpdate"
              },
              {
                "type": "null"
              }
            ],
            "description": "Controls how processing results are stored - either creating a new asset or updating an existing one."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata associated with the file. Can include any key-value pairs relevant to the file.",
            "default": {},
            "example": {
              "author": "John Doe",
              "category": "Research Paper",
              "tags": [
                "AI",
                "Machine Learning"
              ]
            }
          },
          "feature_extractors": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for text processing."
          },
          "skip_duplicate": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip Duplicate",
            "description": "Skips processing when a duplicate hash is found and stores an error by the task_id with the existing asset_id",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "collection"
        ],
        "title": "ProcessTextInput"
      },
      "ProcessVideoURLInput": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL of the asset to be processed. Must be a valid HTTP or HTTPS URL.",
            "example": "https://example.com/sample-video.mp4"
          },
          "collection": {
            "type": "string",
            "title": "Collection",
            "description": "Unique identifier for the collection where the processed asset will be stored, can be the collection name or collection ID. If neither exist, the collection will be created.",
            "example": "col_1234567890"
          },
          "asset_update": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssetUpdate"
              },
              {
                "type": "null"
              }
            ],
            "description": "Controls how processing results are stored - either creating a new asset or updating an existing one."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata associated with the asset. Can include any key-value pairs relevant to the asset.",
            "default": {},
            "example": {
              "author": "John Doe",
              "category": "Research Paper",
              "tags": [
                "AI",
                "Machine Learning"
              ]
            }
          },
          "skip_duplicate": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip Duplicate",
            "description": "Makes feature extraction idempotent. When True and a duplicate file hash is found, copies features from the existing asset instead of reprocessing. This allows the same file to be used multiple times with different metadata while avoiding redundant processing.",
            "default": true
          },
          "feature_extractors": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VideoSettings"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feature Extractors",
            "description": "Settings for video processing. Only applicable if the URL points to a video file."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "url",
          "collection"
        ],
        "title": "ProcessVideoURLInput"
      },
      "QuerySettings": {
        "properties": {
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "description": "Optional limit for number of results per vector index, this is overriden by ?page_size=int if a single query is provided.",
            "default": 100,
            "example": 10
          },
          "min_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Score",
            "description": "Optional score threshold for filtering results",
            "example": 0.5
          },
          "modality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modality",
            "description": "Optional modality override for the query, this is only used for multimodal embeddings",
            "example": "image"
          }
        },
        "type": "object",
        "title": "QuerySettings"
      },
      "RerankingOptions": {
        "properties": {
          "weights": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Weights",
            "description": "\n        Weights to blend different ranking signals. Must sum to 1.0.\n        - feedback: Weight for feedback-based score (positive, negative)\n        - popularity: Weight for user interaction signals (clicks, views)\n        ",
            "example": {
              "feedback": 0.7,
              "popularity": 0.3
            }
          },
          "enable_reranking": {
            "type": "boolean",
            "title": "Enable Reranking",
            "description": "\n        Enable interaction-based score adjustments.\n        When enabled, historical interactions will influence ranking:\n        - Positive feedback and clicks boost scores\n        - Negative feedback reduces scores\n        - View duration and skip signals are considered\n        - Adjustments are weighted by recency\n        ",
            "default": false,
            "example": true
          }
        },
        "type": "object",
        "title": "RerankingOptions"
      },
      "SearchAssetsRequest": {
        "properties": {
          "query": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/assets__model__SearchQuery"
              },
              {
                "type": "null"
              }
            ],
            "description": "Structured query object specifying which fields to search in and what to search for"
          },
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections",
            "description": "List of Collection IDs or Names to search within, required",
            "example": [
              "col_123",
              "my_collection"
            ]
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Complex nested query filters"
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "List of fields to sort by"
          },
          "select": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Select",
            "description": "List of fields to return in results"
          },
          "return_url": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Return Url",
            "description": "Return the presigned URL for the asset and preview asset, this will introduce additional latency",
            "default": false,
            "example": true
          }
        },
        "type": "object",
        "required": [
          "collections"
        ],
        "title": "SearchAssetsRequest"
      },
      "SearchRequestFeatures": {
        "properties": {
          "queries": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/search__model__SearchQuery"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Queries",
            "description": "List of search queries to perform.\n        \n        Behavior:\n        - Single query: Results are returned directly from that query\n        - Multiple queries: Results are combined using Reciprocal Rank Fusion (RRF)\n        \n        RRF combines results from multiple queries by:\n        1. Taking each item's rank position in each result list\n        2. Re-ranking all items by their combined RRF scores\n        \n        When merging lists from different sources, \n        RRF considers all items that appear in any of the input lists, \n        not just items that appear in all lists.\n        \n        This helps surface items that rank well across multiple queries while\n        reducing the impact of outlier high rankings in single queries.\n        \n        NOTE: If query array is empty, it will return all features.\n        \n        ",
            "default": [],
            "example": [
              {
                "embedding_model": "image",
                "settings": {
                  "limit": 50,
                  "min_score": 0.7
                },
                "type": "url",
                "value": "https://example.com/dog.jpg"
              },
              {
                "embedding_model": "text",
                "type": "text",
                "value": "This is a text query"
              }
            ]
          },
          "collections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections",
            "description": "List of Collection names to search within, required",
            "example": [
              "collection1",
              "collection2"
            ]
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Used for filtering across all indexes"
          },
          "group_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GroupByOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Grouping options for search results",
            "example": {
              "field": "asset_id",
              "max_features": 10,
              "sort": {
                "direction": "desc",
                "field": "metadata.field_name"
              }
            }
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "description": "List of fields to sort by, with direction (asc or desc). Supports dot notation for nested fields.",
            "example": {
              "direction": "desc",
              "field": "score"
            }
          },
          "select": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Select",
            "description": "List of fields to return in results, supports dot notation. If None, all fields are returned.",
            "example": [
              "title",
              "content",
              "metadata.author",
              "metadata.publication_date"
            ]
          },
          "reranking_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RerankingOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Options for ranking the search results, including weights and feedback application"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Identifier for tracking search session interactions",
            "example": "sess_abc123"
          },
          "return_url": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Return Url",
            "description": "Return the presigned URL for the asset and preview asset, this will introduce additional latency",
            "default": false,
            "example": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "collections"
        ],
        "title": "SearchRequestFeatures"
      },
      "SortOption": {
        "properties": {
          "field": {
            "type": "string",
            "title": "Field",
            "description": "Field to sort by, supports dot notation for nested fields",
            "example": "score"
          },
          "direction": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "title": "Direction",
            "description": "Sort direction",
            "example": "desc"
          }
        },
        "type": "object",
        "required": [
          "field",
          "direction"
        ],
        "title": "SortOption"
      },
      "SparseEmbedding": {
        "properties": {
          "indices": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Indices",
            "description": "Indices for sparse vector"
          },
          "values": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Values",
            "description": "Values for sparse vector"
          }
        },
        "type": "object",
        "required": [
          "indices",
          "values"
        ],
        "title": "SparseEmbedding"
      },
      "TaskResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus",
            "default": "PENDING"
          },
          "inputs": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inputs"
          },
          "outputs": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outputs"
          }
        },
        "type": "object",
        "required": [
          "task_id"
        ],
        "title": "TaskResponse"
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "DONE",
          "FAILED",
          "SKIPPED",
          "CANCELLED",
          "PROCESSING",
          "DOWNLOADING",
          "INITIALIZING",
          "UPLOADING",
          "QUEUED",
          "PENDING"
        ],
        "title": "TaskStatus"
      },
      "TaxonomyCreate": {
        "properties": {
          "taxonomy_name": {
            "type": "string",
            "title": "Taxonomy Name",
            "description": "Taxonomy name (must not contain spaces or special characters)",
            "example": "electronics"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/TaxonomyNodeCreate"
            },
            "type": "array",
            "title": "Nodes"
          }
        },
        "type": "object",
        "required": [
          "taxonomy_name",
          "nodes"
        ],
        "title": "TaxonomyCreate"
      },
      "TaxonomyExtractionConfig": {
        "properties": {
          "taxonomy_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Taxonomy Ids",
            "description": "List of taxonomy IDs to use for classification",
            "example": [
              "tax_123"
            ]
          },
          "confidence_threshold": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Confidence Threshold",
            "description": "Minimum confidence score required for classification",
            "default": 0.8
          },
          "embedding_models": {
            "items": {
              "$ref": "#/components/schemas/AvailableModels"
            },
            "type": "array",
            "title": "Embedding Models",
            "description": "Vector indexes to use for classification",
            "example": [
              "multimodal",
              "text"
            ]
          }
        },
        "type": "object",
        "required": [
          "taxonomy_ids",
          "embedding_models"
        ],
        "title": "TaxonomyExtractionConfig",
        "description": "Configuration for taxonomy-based entity extraction during ingestion"
      },
      "TaxonomyModel": {
        "properties": {
          "taxonomy_id": {
            "type": "string",
            "title": "Taxonomy Id",
            "description": "Auto-generated taxonomy identifier",
            "example": "tax_abc123xyz"
          },
          "taxonomy_name": {
            "type": "string",
            "title": "Taxonomy Name",
            "description": "Taxonomy name",
            "example": "electronics"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/TaxonomyNode"
            },
            "type": "array",
            "title": "Nodes",
            "description": "Taxonomy nodes",
            "example": [
              {
                "children": [],
                "embedding_configs": [
                  {
                    "embedding_model": "text",
                    "type": "text",
                    "value": "electronics accessories"
                  }
                ],
                "node_description": "Electronics accessories and peripherals category",
                "node_id": "node_abc123def456gh",
                "node_name": "electronics_accessories",
                "path_tokens": [
                  "electronics_accessories"
                ]
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "taxonomy_name",
          "nodes"
        ],
        "title": "TaxonomyModel"
      },
      "TaxonomyNode": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "Unique identifier for the taxonomy node",
            "example": "node_abc123def456gh"
          },
          "taxonomy_id": {
            "type": "string",
            "title": "Taxonomy Id",
            "description": "ID of the taxonomy this node belongs to",
            "example": "tax_xyz789"
          },
          "parent_node_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Node Id",
            "description": "ID of the parent node (None if root node)",
            "example": "node_123abc456def"
          },
          "node_name": {
            "type": "string",
            "title": "Node Name",
            "description": "Name of the taxonomy node (must be lowercase without spaces)",
            "example": "electronics_accessories"
          },
          "node_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Description",
            "description": "Optional description of what this node represents",
            "example": "Electronics accessories and peripherals category"
          },
          "children": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TaxonomyNode"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Children",
            "description": "List of child nodes under this node"
          },
          "path_tokens": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Path Tokens",
            "description": "List of node names representing the path from root to this node",
            "example": [
              "electronics",
              "accessories",
              "cables"
            ]
          },
          "embedding_configs": {
            "items": {
              "$ref": "#/components/schemas/EmbeddingConfig"
            },
            "type": "array",
            "title": "Embedding Configs",
            "description": "List of embedding configurations defining how this node should be vectorized",
            "example": [
              {
                "embedding_model": "text",
                "type": "text",
                "value": "electronics accessories"
              }
            ]
          },
          "order": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Order",
            "description": "Order of the node in the taxonomy",
            "example": [
              1,
              2,
              3
            ]
          },
          "depth": {
            "type": "integer",
            "title": "Depth",
            "description": "Depth of the node in the taxonomy",
            "default": 0,
            "example": 1
          }
        },
        "type": "object",
        "required": [
          "taxonomy_id",
          "node_name",
          "embedding_configs"
        ],
        "title": "TaxonomyNode"
      },
      "TaxonomyNodeCreate": {
        "properties": {
          "node_name": {
            "type": "string",
            "title": "Node Name",
            "description": "Name of the taxonomy node (must be lowercase without spaces)",
            "example": "electronics_accessories"
          },
          "node_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Description",
            "description": "Optional description of what this node represents",
            "example": "Electronics accessories and peripherals category"
          },
          "embedding_configs": {
            "items": {
              "$ref": "#/components/schemas/EmbeddingConfig"
            },
            "type": "array",
            "title": "Embedding Configs",
            "description": "List of embedding configurations defining how this node should be vectorized",
            "example": [
              {
                "embedding_model": "text",
                "type": "text",
                "value": "electronics accessories"
              }
            ]
          },
          "children": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TaxonomyNodeCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Children",
            "description": "List of child nodes under this node"
          }
        },
        "type": "object",
        "required": [
          "node_name",
          "embedding_configs"
        ],
        "title": "TaxonomyNodeCreate"
      },
      "TaxonomyUpdate": {
        "properties": {
          "taxonomy_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Taxonomy Name",
            "description": "Updated taxonomy name (must not contain spaces or special characters)",
            "example": "electronics_updated"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Updated taxonomy description",
            "example": "Updated electronics taxonomy"
          }
        },
        "type": "object",
        "title": "TaxonomyUpdate",
        "description": "Model for updating specific taxonomy fields"
      },
      "TextIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "text"
          },
          "tokenizer": {
            "$ref": "#/components/schemas/TokenizerType",
            "default": "word"
          },
          "min_token_len": {
            "type": "integer",
            "title": "Min Token Len",
            "default": 2
          },
          "max_token_len": {
            "type": "integer",
            "title": "Max Token Len",
            "default": 15
          },
          "lowercase": {
            "type": "boolean",
            "title": "Lowercase",
            "default": true
          }
        },
        "type": "object",
        "title": "TextIndexParams",
        "description": "Configuration for text index"
      },
      "TextSettings": {
        "properties": {
          "embed": {
            "items": {
              "$ref": "#/components/schemas/EmbeddingRequest"
            },
            "type": "array",
            "title": "Embed",
            "description": "List of embedding settings for generating multiple embeddings. field_name's provided are how the raw text will be inserted, if not provided, the field_name will be auto-generated. \n Default: [{type: 'text', embedding_model: 'multimodal'}] if none provided.",
            "example": [
              {
                "embedding_model": "multimodal",
                "type": "text",
                "value": "lorem ipsum 1"
              },
              {
                "embedding_model": "keyword",
                "type": "text",
                "value": "lorem ipsum 2"
              },
              {
                "embedding_model": "text",
                "type": "text",
                "value": "lorem ipsum 3"
              }
            ]
          },
          "json_output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JSONTextOutputSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for structured JSON output of text analysis.",
            "example": {
              "response_shape": {
                "key_phrases": [
                  "str"
                ],
                "sentiment": "str"
              }
            }
          },
          "entities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntitySettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for extracting entities from text content"
          }
        },
        "type": "object",
        "title": "TextSettings"
      },
      "TokenizerType": {
        "type": "string",
        "enum": [
          "word",
          "whitespace",
          "prefix",
          "multilingual"
        ],
        "title": "TokenizerType"
      },
      "UpdateAssetRequest": {
        "properties": {
          "propagate_features": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Propagate Features",
            "description": "If True, the features will be propagated to all assets with the same asset_id",
            "default": false,
            "example": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Updated metadata for the asset. This can include any key-value pairs that should be updated or added to the asset's metadata.",
            "example": {
              "description": "A new description",
              "title": "New Title"
            }
          }
        },
        "type": "object",
        "title": "UpdateAssetRequest"
      },
      "UpdateNamespaceRequest": {
        "properties": {
          "namespace_name": {
            "type": "string",
            "title": "Namespace Name",
            "description": "Name of the namespace to update",
            "example": "spotify_playlists_dev"
          },
          "payload_indexes": {
            "items": {
              "$ref": "#/components/schemas/PayloadIndexConfig"
            },
            "type": "array",
            "title": "Payload Indexes",
            "description": "Updated list of payload index configurations",
            "example": [
              {
                "field_name": "metadata.title",
                "field_schema": {
                  "lowercase": true,
                  "max_token_len": 15,
                  "min_token_len": 2,
                  "tokenizer": "word",
                  "type": "text"
                },
                "type": "text"
              },
              {
                "field_name": "metadata.description",
                "field_schema": {
                  "is_tenant": false,
                  "type": "keyword"
                },
                "type": "keyword"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "namespace_name",
          "payload_indexes"
        ],
        "title": "UpdateNamespaceRequest",
        "description": "Request schema for updating a namespace's payload indexes"
      },
      "Usage": {
        "properties": {
          "total_credits": {
            "type": "integer",
            "title": "Total Credits"
          },
          "dates": {
            "items": {
              "$ref": "#/components/schemas/DateUsage"
            },
            "type": "array",
            "title": "Dates"
          }
        },
        "type": "object",
        "required": [
          "total_credits",
          "dates"
        ],
        "title": "Usage"
      },
      "UserModel-Input": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "api_keys": {
            "items": {
              "$ref": "#/components/schemas/APIKey"
            },
            "type": "array",
            "title": "Api Keys"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserModel"
      },
      "UserModel-Output": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "api_keys": {
            "items": {
              "$ref": "#/components/schemas/APIKey"
            },
            "type": "array",
            "title": "Api Keys"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserModel"
      },
      "UuidIndexParams": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "uuid"
          },
          "is_tenant": {
            "type": "boolean",
            "title": "Is Tenant",
            "default": false
          }
        },
        "type": "object",
        "title": "UuidIndexParams",
        "description": "Configuration for UUID index"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VectorModel": {
        "type": "string",
        "enum": [
          "image",
          "openai-clip-vit-base-patch32",
          "multimodal",
          "vertex-multimodal",
          "text",
          "baai-bge-m3",
          "keyword",
          "naver-splade-v3"
        ],
        "title": "VectorModel"
      },
      "VectorType": {
        "type": "string",
        "enum": [
          "sparse",
          "dense"
        ],
        "title": "VectorType"
      },
      "VideoDescribeSettings": {
        "properties": {
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Prompt for video description",
            "default": "\n                Describe this video segment in as much detail as possible.\n                You are to create a screenplay of the video segment, including all the actions and sounds.\n                Make sure to include objects, motion, sound, and any other relevant information.\n                The purpose of this is so I can search through the text to find this video segment later.\n                                  \n                Don't include any pretext like \"this is a video of\" or \"this video shows\".\n                                  \n                Don't include text that is already visible in the video. \n    "
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable video description",
            "default": true
          },
          "max_length": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Length",
            "description": "Maximum length of the description",
            "default": 1000
          },
          "json_output": {
            "type": "object",
            "title": "Json Output",
            "description": "JSON format for the response",
            "default": {}
          },
          "embedding_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the vector model to use for embedding the text output. If embedding_model is duplicated, the vector will be overwritten.",
            "example": "text_vector"
          }
        },
        "type": "object",
        "title": "VideoDescribeSettings"
      },
      "VideoDetectSettings": {
        "properties": {
          "logos": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogoDetectSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for logo detection",
            "default": {
              "enabled": true,
              "confidence_threshold": 0.7
            }
          }
        },
        "type": "object",
        "title": "VideoDetectSettings"
      },
      "VideoReadSettings": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable video reading",
            "default": true
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Prompt for reading on-screen text",
            "default": "\n    Read all visible text from this video segment.\n    Only include text that appears on the screen, ignoring any other visual elements or audio.\n    Provide the text exactly as it appears, maintaining its original formatting and structure.\n    Do not describe or interpret the content, just read the text verbatim.\n    Ignore any special characters or formatting symbols like '\n', '\t', or similar that might appear in the text.\n    Do not repeat text that appears multiple times; include it only once.\n    ___\n    IMPORTANT: \n    - If there is no text, or if the text is illegible, return an empty string.\n    - Avoid listing repeated elements multiple times.\n    - Provide a concise, non-redundant representation of the text content.\n    "
          },
          "json_output": {
            "type": "object",
            "title": "Json Output",
            "description": "JSON format for the response",
            "default": {}
          },
          "embedding_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the vector model to use for embedding the text output. If embedding_model is duplicated, the vector will be overwritten.",
            "example": "text_vector"
          }
        },
        "type": "object",
        "title": "VideoReadSettings"
      },
      "VideoSettings": {
        "properties": {
          "interval_sec": {
            "type": "integer",
            "maximum": 120,
            "minimum": 5,
            "title": "Interval Sec",
            "description": "Interval in seconds for processing video. Must be greater than or equal to 5, less than 120.",
            "default": 10,
            "example": 15
          },
          "read": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VideoReadSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for reading and analyzing video content.",
            "example": {
              "enabled": true
            }
          },
          "embed": {
            "items": {
              "$ref": "#/components/schemas/EmbeddingRequest"
            },
            "type": "array",
            "title": "Embed",
            "description": "List of embedding settings for generating multiple embeddings. For now, if url is provided, value must be None. \n Default: [{type: 'url', embedding_model: 'multimodal'}] if none provided.",
            "example": [
              {
                "embedding_model": "multimodal",
                "type": "url"
              },
              {
                "embedding_model": "text",
                "type": "text",
                "value": "lorem ipsum"
              }
            ]
          },
          "transcribe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VideoTranscriptionSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for transcribing video audio.",
            "example": {
              "enabled": true
            }
          },
          "describe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VideoDescribeSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for generating video descriptions.",
            "example": {
              "enabled": true
            }
          },
          "detect": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VideoDetectSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for object detection in video frames.",
            "example": {
              "faces": {
                "confidence_threshold": 0.8,
                "enabled": true
              }
            }
          },
          "json_output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JSONVideoOutputSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for structured JSON output of video analysis.",
            "example": {
              "response_shape": {
                "objects": [
                  "str"
                ],
                "scenes": [
                  "str"
                ]
              }
            }
          },
          "entities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EntitySettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for extracting entities from video content"
          }
        },
        "type": "object",
        "title": "VideoSettings"
      },
      "VideoTranscriptionSettings": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Enable video transcription",
            "default": true
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "default": "\n        Transcribe the spoken words in this video accurately and comprehensively, adhering to the following guidelines:\n        Transcribe in the original spoken language(s).\n        Preserve filler words (um, uh, etc.) and false starts.\n        Use appropriate punctuation to reflect natural speech patterns and pauses.\n        For acronyms or specialized terms, transcribe as heard.\n        If there is no audio, return None.\n        "
          },
          "json_output": {
            "type": "object",
            "title": "Json Output",
            "description": "JSON format for the response",
            "default": {}
          },
          "embedding_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VectorModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the vector model to use for embedding the text output. If embedding_model is duplicated, the vector will be overwritten.",
            "example": "text"
          }
        },
        "type": "object",
        "title": "VideoTranscriptionSettings"
      },
      "assets__model__SearchQuery": {
        "properties": {
          "key": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Key",
            "description": "Fields to search in. Can be a list of field names or '*' for all fields",
            "example": [
              "title",
              "description"
            ]
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The search term to look for in the specified fields",
            "example": "search term"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "SearchQuery"
      },
      "db__model__PaginationResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "next_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page"
          },
          "previous_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Page"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "page_size",
          "total_pages",
          "next_page",
          "previous_page"
        ],
        "title": "PaginationResponse"
      },
      "features__model__PaginationResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page"
          },
          "next_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page"
          },
          "previous_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Page"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page_size",
          "total_pages",
          "current_page",
          "next_page",
          "previous_page"
        ],
        "title": "PaginationResponse"
      },
      "search__model__SearchQuery": {
        "properties": {
          "embedding_model": {
            "$ref": "#/components/schemas/AvailableModels",
            "description": "Name of the vector index to search",
            "example": "image"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Query value - can be text, URL, or base64 encoded image",
            "example": "This is a text query"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "url",
              "base64"
            ],
            "title": "Type",
            "description": "Type of input (text, url, or base64)",
            "example": "url"
          },
          "filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogicalOperator"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional filters for the query, this is used for filtering individual vector indexes"
          },
          "settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuerySettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional settings for this specific query"
          }
        },
        "type": "object",
        "required": [
          "embedding_model",
          "value",
          "type"
        ],
        "title": "SearchQuery"
      }
    },
    "securitySchemes": {
      "token": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "x-speakeasy-globals": {
    "parameters": [
      {
        "name": "x-namespace",
        "in": "header",
        "required": false,
        "description": "Optional namespace for data isolation. This can be a namespace name or namespace ID. Example: 'netflix_prod' or 'ns_1234567890'. To create a namespace, use the /namespaces endpoint.",
        "title": "X-Namespace",
        "schema": {
          "type": "string"
        }
      }
    ]
  }
}